
nrf24_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a4  080032a4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080032a4  080032a4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a4  080032a4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080032ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000001c  080032c8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080032c8  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbd9  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be6  00000000  00000000  0002bc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016edf  00000000  00000000  0002f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9be  00000000  00000000  00045f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086db3  00000000  00000000  0005291d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d96d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  000d9724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800325c 	.word	0x0800325c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800325c 	.word	0x0800325c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1*/
  if(NRF24_SERVICE_STATUS_OK != NRF24_Service_Init())
 8000150:	f000 fce8 	bl	8000b24 <NRF24_Service_Init>
 8000154:	4603      	mov	r3, r0
 8000156:	2b00      	cmp	r3, #0
 8000158:	d002      	beq.n	8000160 <main+0x14>
  {
    return -1;
 800015a:	f04f 33ff 	mov.w	r3, #4294967295
 800015e:	e0e1      	b.n	8000324 <main+0x1d8>
  }
  //Reset all Register
  if(NRF24_SERVICE_STATUS_OK != NRF24_SoftReset_Init())
 8000160:	f000 fcec 	bl	8000b3c <NRF24_SoftReset_Init>
 8000164:	4603      	mov	r3, r0
 8000166:	2b00      	cmp	r3, #0
 8000168:	d002      	beq.n	8000170 <main+0x24>
  {
    return -1;
 800016a:	f04f 33ff 	mov.w	r3, #4294967295
 800016e:	e0d9      	b.n	8000324 <main+0x1d8>
  }
  //Init nrf24 service handler;
  memset(&nrf24_ser_handler, 0, sizeof(NRF24_SERVICE_HANDLER));
 8000170:	221a      	movs	r2, #26
 8000172:	2100      	movs	r1, #0
 8000174:	486c      	ldr	r0, [pc, #432]	; (8000328 <main+0x1dc>)
 8000176:	f003 f869 	bl	800324c <memset>
  nrf24_ser_handler.mode             = NRF24_TRANSCIVER_MODE_RX;
 800017a:	4b6b      	ldr	r3, [pc, #428]	; (8000328 <main+0x1dc>)
 800017c:	2201      	movs	r2, #1
 800017e:	715a      	strb	r2, [r3, #5]
  nrf24_ser_handler.have_rx_pkt      = false;
 8000180:	4b69      	ldr	r3, [pc, #420]	; (8000328 <main+0x1dc>)
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]
  nrf24_ser_handler.tx_pkt_full      = false;
 8000186:	4b68      	ldr	r3, [pc, #416]	; (8000328 <main+0x1dc>)
 8000188:	2200      	movs	r2, #0
 800018a:	705a      	strb	r2, [r3, #1]
  nrf24_ser_handler.transmit_done    = false;
 800018c:	4b66      	ldr	r3, [pc, #408]	; (8000328 <main+0x1dc>)
 800018e:	2200      	movs	r2, #0
 8000190:	709a      	strb	r2, [r3, #2]
  nrf24_ser_handler.rx_data_ready    = false;
 8000192:	4b65      	ldr	r3, [pc, #404]	; (8000328 <main+0x1dc>)
 8000194:	2200      	movs	r2, #0
 8000196:	70da      	strb	r2, [r3, #3]
  nrf24_ser_handler.transmit_err     = false;
 8000198:	4b63      	ldr	r3, [pc, #396]	; (8000328 <main+0x1dc>)
 800019a:	2200      	movs	r2, #0
 800019c:	711a      	strb	r2, [r3, #4]
  memcpy(nrf24_ser_handler.nrf24_dev_addr, node_addr, 5);
 800019e:	4b62      	ldr	r3, [pc, #392]	; (8000328 <main+0x1dc>)
 80001a0:	4a62      	ldr	r2, [pc, #392]	; (800032c <main+0x1e0>)
 80001a2:	3306      	adds	r3, #6
 80001a4:	6810      	ldr	r0, [r2, #0]
 80001a6:	6018      	str	r0, [r3, #0]
 80001a8:	7912      	ldrb	r2, [r2, #4]
 80001aa:	711a      	strb	r2, [r3, #4]
  //Used Only one pipe for this example
  nrf24_ser_handler.pipe[0].is_en    = true;
 80001ac:	4b5e      	ldr	r3, [pc, #376]	; (8000328 <main+0x1dc>)
 80001ae:	2201      	movs	r2, #1
 80001b0:	72da      	strb	r2, [r3, #11]
  nrf24_ser_handler.pipe[0].addr     = 0x03;
 80001b2:	4b5d      	ldr	r3, [pc, #372]	; (8000328 <main+0x1dc>)
 80001b4:	2203      	movs	r2, #3
 80001b6:	731a      	strb	r2, [r3, #12]
  nrf24_ser_handler.pipe[0].pipe_idx = 1;
 80001b8:	4b5b      	ldr	r3, [pc, #364]	; (8000328 <main+0x1dc>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	735a      	strb	r2, [r3, #13]
  /* USER CODE END 1 */
  //Set address witdh is 5 byte
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_Addr_Width(NRF24_SET_ADDR_WIDTH_5BYTE))
 80001be:	2003      	movs	r0, #3
 80001c0:	f000 ff46 	bl	8001050 <NRF24_Set_Addr_Width>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d002      	beq.n	80001d0 <main+0x84>
  {
    return -1;
 80001ca:	f04f 33ff 	mov.w	r3, #4294967295
 80001ce:	e0a9      	b.n	8000324 <main+0x1d8>
  }

  //Set 1 Byte CRC encoding
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_CRC_encoding(NRF24_CRC_ENCODE_1BYTE))
 80001d0:	2008      	movs	r0, #8
 80001d2:	f000 feb6 	bl	8000f42 <NRF24_Set_CRC_encoding>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d002      	beq.n	80001e2 <main+0x96>
  {
    return -1;
 80001dc:	f04f 33ff 	mov.w	r3, #4294967295
 80001e0:	e0a0      	b.n	8000324 <main+0x1d8>
  }

  //Set IRQ mask for node: MAX re-transmit, data send, rx data ready
  if(NRF24_SERVICE_STATUS_OK != NRF24_Config_IRQ_Mask(NRF24_CONFIG_IRQ_MASK_ALL, true))
 80001e2:	2101      	movs	r1, #1
 80001e4:	2070      	movs	r0, #112	; 0x70
 80001e6:	f000 fef6 	bl	8000fd6 <NRF24_Config_IRQ_Mask>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <main+0xaa>
  {
    return -1;
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	e096      	b.n	8000324 <main+0x1d8>
  }

  //Set Auto re-transmit delay
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_Auto_Retransmit_Delay(NRF24_RETRANSMIT_DELAY_1000US))
 80001f6:	2003      	movs	r0, #3
 80001f8:	f000 ff3f 	bl	800107a <NRF24_Set_Auto_Retransmit_Delay>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d002      	beq.n	8000208 <main+0xbc>
  {
    return -1;
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	e08d      	b.n	8000324 <main+0x1d8>
  }

  //Set Max auto re-transmit count
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_Auto_Retransmit_Count(6))
 8000208:	2006      	movs	r0, #6
 800020a:	f000 ff62 	bl	80010d2 <NRF24_Set_Auto_Retransmit_Count>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d002      	beq.n	800021a <main+0xce>
  {
    return -1;
 8000214:	f04f 33ff 	mov.w	r3, #4294967295
 8000218:	e084      	b.n	8000324 <main+0x1d8>
  }

  //Set RF channel
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_RF_Channel(26))
 800021a:	201a      	movs	r0, #26
 800021c:	f000 ff82 	bl	8001124 <NRF24_Set_RF_Channel>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d002      	beq.n	800022c <main+0xe0>
  {
    return -1;
 8000226:	f04f 33ff 	mov.w	r3, #4294967295
 800022a:	e07b      	b.n	8000324 <main+0x1d8>
  }

  //Set Data rate
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_RF_Data_Rate(NRF24_DATA_RATE_1MBPS))
 800022c:	2000      	movs	r0, #0
 800022e:	f000 ffa2 	bl	8001176 <NRF24_Set_RF_Data_Rate>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <main+0xf2>
  {
    return -1;
 8000238:	f04f 33ff 	mov.w	r3, #4294967295
 800023c:	e072      	b.n	8000324 <main+0x1d8>
  }

  //Set Power Transmition
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_RF_PWR(NRF24_OUTPUT_PWR_6DBM))
 800023e:	2004      	movs	r0, #4
 8000240:	f000 ffc2 	bl	80011c8 <NRF24_Set_RF_PWR>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <main+0x104>
  {
    return -1;
 800024a:	f04f 33ff 	mov.w	r3, #4294967295
 800024e:	e069      	b.n	8000324 <main+0x1d8>
  }

  //Set Enable PIPE 0
  if(NRF24_SERVICE_STATUS_OK != NRF24_En_Dis_PIPE(NRF24_ENABLE_RX_PIPE0, true))
 8000250:	2101      	movs	r1, #1
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fe02 	bl	8000e5c <NRF24_En_Dis_PIPE>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d002      	beq.n	8000264 <main+0x118>
  {
    return -1;
 800025e:	f04f 33ff 	mov.w	r3, #4294967295
 8000262:	e05f      	b.n	8000324 <main+0x1d8>
  }

  //Set Enable PIPE 1
  if(NRF24_SERVICE_STATUS_OK != NRF24_En_Dis_PIPE(NRF24_ENABLE_RX_PIPE1, true))
 8000264:	2101      	movs	r1, #1
 8000266:	2002      	movs	r0, #2
 8000268:	f000 fdf8 	bl	8000e5c <NRF24_En_Dis_PIPE>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d002      	beq.n	8000278 <main+0x12c>
  {
    return -1;
 8000272:	f04f 33ff 	mov.w	r3, #4294967295
 8000276:	e055      	b.n	8000324 <main+0x1d8>
  }

  //Set Dynamic payload for pipe 0
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_DYNPLD_For_PIPE(0, NRF24_DYNAMIC_PLD_MODE_ON))
 8000278:	2104      	movs	r1, #4
 800027a:	2000      	movs	r0, #0
 800027c:	f000 ffe2 	bl	8001244 <NRF24_Set_DYNPLD_For_PIPE>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d002      	beq.n	800028c <main+0x140>
  {
    return -1;
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	e04b      	b.n	8000324 <main+0x1d8>
  }

  //Set Dynamic payload for pipe 1
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_DYNPLD_For_PIPE(1, NRF24_DYNAMIC_PLD_MODE_ON))
 800028c:	2104      	movs	r1, #4
 800028e:	2001      	movs	r0, #1
 8000290:	f000 ffd8 	bl	8001244 <NRF24_Set_DYNPLD_For_PIPE>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d002      	beq.n	80002a0 <main+0x154>
  {
    return -1;
 800029a:	f04f 33ff 	mov.w	r3, #4294967295
 800029e:	e041      	b.n	8000324 <main+0x1d8>
  }

  //Set address for this node
  if(NRF24_SERVICE_STATUS_OK != NRF24_SetAddress(0, nrf24_ser_handler.nrf24_dev_addr, 5))
 80002a0:	2205      	movs	r2, #5
 80002a2:	4923      	ldr	r1, [pc, #140]	; (8000330 <main+0x1e4>)
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fd91 	bl	8000dcc <NRF24_SetAddress>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <main+0x16a>
  {
    return -1;
 80002b0:	f04f 33ff 	mov.w	r3, #4294967295
 80002b4:	e036      	b.n	8000324 <main+0x1d8>
  }

  //Set address for pipe 1
  if(NRF24_SERVICE_STATUS_OK != NRF24_SetAddress(nrf24_ser_handler.pipe[0].pipe_idx, \
 80002b6:	4b1c      	ldr	r3, [pc, #112]	; (8000328 <main+0x1dc>)
 80002b8:	7b5b      	ldrb	r3, [r3, #13]
 80002ba:	2201      	movs	r2, #1
 80002bc:	491d      	ldr	r1, [pc, #116]	; (8000334 <main+0x1e8>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fd84 	bl	8000dcc <NRF24_SetAddress>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d002      	beq.n	80002d0 <main+0x184>
                                                      &(nrf24_ser_handler.pipe[0].addr), 1))
  {
    return -1;
 80002ca:	f04f 33ff 	mov.w	r3, #4294967295
 80002ce:	e029      	b.n	8000324 <main+0x1d8>
  }

  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE_TX))
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 fe00 	bl	8000ed6 <NRF24_Set_RX_TX>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <main+0x196>
  {
	  return -1;
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
 80002e0:	e020      	b.n	8000324 <main+0x1d8>

  while (1)
  {
    /* USER CODE END WHILE */
    //Send ACK_PLD data
    if(NRF24_SERVICE_STATUS_OK != NRF24_Write_TX_PLD_ACK(nrf24_ser_handler.pipe[0].pipe_idx,\
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <main+0x1dc>)
 80002e4:	7b5b      	ldrb	r3, [r3, #13]
 80002e6:	2202      	movs	r2, #2
 80002e8:	4913      	ldr	r1, [pc, #76]	; (8000338 <main+0x1ec>)
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 f829 	bl	8001342 <NRF24_Write_TX_PLD_ACK>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d006      	beq.n	8000304 <main+0x1b8>
                                                              &data_count_ptx, sizeof(data_count_ptx)))
    {
      return -1;
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295
 80002fa:	e013      	b.n	8000324 <main+0x1d8>
    }

    while(!nrf24_ser_handler.transmit_done)
    {
      if(nrf24_ser_handler.transmit_err)
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <main+0x1dc>)
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d107      	bne.n	8000314 <main+0x1c8>
    while(!nrf24_ser_handler.transmit_done)
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <main+0x1dc>)
 8000306:	789b      	ldrb	r3, [r3, #2]
 8000308:	f083 0301 	eor.w	r3, r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d1f4      	bne.n	80002fc <main+0x1b0>
 8000312:	e000      	b.n	8000316 <main+0x1ca>
      {
        break;
 8000314:	bf00      	nop
      }
    }
    /* USER CODE BEGIN 3 */
    data_count_ptx++;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <main+0x1ec>)
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	b29a      	uxth	r2, r3
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <main+0x1ec>)
 8000320:	801a      	strh	r2, [r3, #0]
    if(NRF24_SERVICE_STATUS_OK != NRF24_Write_TX_PLD_ACK(nrf24_ser_handler.pipe[0].pipe_idx,\
 8000322:	e7de      	b.n	80002e2 <main+0x196>
  }
  /* USER CODE END 3 */
}
 8000324:	4618      	mov	r0, r3
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200000e4 	.word	0x200000e4
 800032c:	20000000 	.word	0x20000000
 8000330:	200000ea 	.word	0x200000ea
 8000334:	200000f0 	.word	0x200000f0
 8000338:	20000038 	.word	0x20000038

0800033c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000344:	f107 0310 	add.w	r3, r7, #16
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <HAL_SPI_MspInit+0x88>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d12f      	bne.n	80003bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <HAL_SPI_MspInit+0x8c>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a19      	ldr	r2, [pc, #100]	; (80003c8 <HAL_SPI_MspInit+0x8c>)
 8000362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <HAL_SPI_MspInit+0x8c>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <HAL_SPI_MspInit+0x8c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <HAL_SPI_MspInit+0x8c>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <HAL_SPI_MspInit+0x8c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	60bb      	str	r3, [r7, #8]
 800038a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800038c:	23a0      	movs	r3, #160	; 0xa0
 800038e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000390:	2302      	movs	r3, #2
 8000392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000394:	2303      	movs	r3, #3
 8000396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	480b      	ldr	r0, [pc, #44]	; (80003cc <HAL_SPI_MspInit+0x90>)
 80003a0:	f001 f9d6 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80003a4:	2340      	movs	r3, #64	; 0x40
 80003a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <HAL_SPI_MspInit+0x90>)
 80003b8:	f001 f9ca 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40013000 	.word	0x40013000
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010800 	.word	0x40010800

080003d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <HAL_TIM_Base_MspInit+0x44>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d113      	bne.n	800040a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <HAL_TIM_Base_MspInit+0x48>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <HAL_TIM_Base_MspInit+0x48>)
 80003e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <HAL_TIM_Base_MspInit+0x48>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	2018      	movs	r0, #24
 8000400:	f001 f970 	bl	80016e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000404:	2018      	movs	r0, #24
 8000406:	f001 f989 	bl	800171c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40012c00 	.word	0x40012c00
 8000418:	40021000 	.word	0x40021000

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <NMI_Handler+0x4>

08000422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <HardFault_Handler+0x4>

08000428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <MemManage_Handler+0x4>

0800042e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <UsageFault_Handler+0x4>

0800043a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000462:	f001 f87b 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}

0800046a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800046e:	2008      	movs	r0, #8
 8000470:	f001 fb0a 	bl	8001a88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <TIM1_BRK_IRQHandler+0x10>)
 800047e:	f002 fb5a 	bl	8002b36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000044 	.word	0x20000044

0800048c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000498:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800049a:	e003      	b.n	80004a4 <LoopCopyDataInit>

0800049c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800049e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004a2:	3104      	adds	r1, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004a4:	480a      	ldr	r0, [pc, #40]	; (80004d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004ac:	d3f6      	bcc.n	800049c <CopyDataInit>
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004b0:	e002      	b.n	80004b8 <LoopFillZerobss>

080004b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004b4:	f842 3b04 	str.w	r3, [r2], #4

080004b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004bc:	d3f9      	bcc.n	80004b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004be:	f7ff ffe5 	bl	800048c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004c2:	f002 fe91 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c6:	f7ff fe41 	bl	800014c <main>
  bx lr
 80004ca:	4770      	bx	lr
  ldr r3, =_sidata
 80004cc:	080032ac 	.word	0x080032ac
  ldr r0, =_sdata
 80004d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004d4:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 80004d8:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 80004dc:	20000128 	.word	0x20000128

080004e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_2_IRQHandler>
	...

080004e4 <NRF24_HAL_Init>:

/*------------------------------------------------------------------
                           PUBLISH FUNCTION
  ------------------------------------------------------------------*/
NRF24_HAL_STATUS NRF24_HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    memset(&hal_handler, 0, sizeof(NRF24_HAL_HANDLER));
 80004e8:	2208      	movs	r2, #8
 80004ea:	2100      	movs	r1, #0
 80004ec:	4810      	ldr	r0, [pc, #64]	; (8000530 <NRF24_HAL_Init+0x4c>)
 80004ee:	f002 fead 	bl	800324c <memset>

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_init_clock())
 80004f2:	f000 f9bf 	bl	8000874 <NRF24_HAL_init_clock>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <NRF24_HAL_Init+0x1c>
    {
        return NRF24_HAL_STATUS_FAIL;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e015      	b.n	800052c <NRF24_HAL_Init+0x48>
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_init_spi())
 8000500:	f000 f9fe 	bl	8000900 <NRF24_HAL_init_spi>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <NRF24_HAL_Init+0x2a>
    {
        return NRF24_HAL_STATUS_FAIL;
 800050a:	2301      	movs	r3, #1
 800050c:	e00e      	b.n	800052c <NRF24_HAL_Init+0x48>
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_init_timer())
 800050e:	f000 fa83 	bl	8000a18 <NRF24_HAL_init_timer>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <NRF24_HAL_Init+0x38>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000518:	2301      	movs	r3, #1
 800051a:	e007      	b.n	800052c <NRF24_HAL_Init+0x48>
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_init_gpio())
 800051c:	f000 fa28 	bl	8000970 <NRF24_HAL_init_gpio>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <NRF24_HAL_Init+0x46>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000526:	2301      	movs	r3, #1
 8000528:	e000      	b.n	800052c <NRF24_HAL_Init+0x48>
    }

    return NRF24_HAL_STATUS_OK;
 800052a:	2300      	movs	r3, #0
}
 800052c:	4618      	mov	r0, r3
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000003c 	.word	0x2000003c

08000534 <NRF24_HAL_Write>:
        + time_out: this is time out when SPI transmit.
    Output Parameter:
        + NULL
*/
NRF24_HAL_STATUS NRF24_HAL_Write(uint8_t reg_add, uint8_t *data, uint16_t data_size, uint16_t time_out)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	4611      	mov	r1, r2
 800053e:	461a      	mov	r2, r3
 8000540:	4603      	mov	r3, r0
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	460b      	mov	r3, r1
 8000546:	81bb      	strh	r3, [r7, #12]
 8000548:	4613      	mov	r3, r2
 800054a:	80fb      	strh	r3, [r7, #6]
 800054c:	466b      	mov	r3, sp
 800054e:	461d      	mov	r5, r3
    uint8_t tx_data[data_size + 1];
 8000550:	89bb      	ldrh	r3, [r7, #12]
 8000552:	1c5c      	adds	r4, r3, #1
 8000554:	1e63      	subs	r3, r4, #1
 8000556:	61bb      	str	r3, [r7, #24]
 8000558:	4623      	mov	r3, r4
 800055a:	4618      	mov	r0, r3
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	f04f 0200 	mov.w	r2, #0
 8000564:	f04f 0300 	mov.w	r3, #0
 8000568:	00cb      	lsls	r3, r1, #3
 800056a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800056e:	00c2      	lsls	r2, r0, #3
 8000570:	4623      	mov	r3, r4
 8000572:	4618      	mov	r0, r3
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	f04f 0300 	mov.w	r3, #0
 8000580:	00cb      	lsls	r3, r1, #3
 8000582:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000586:	00c2      	lsls	r2, r0, #3
 8000588:	4623      	mov	r3, r4
 800058a:	3307      	adds	r3, #7
 800058c:	08db      	lsrs	r3, r3, #3
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	ebad 0d03 	sub.w	sp, sp, r3
 8000594:	466b      	mov	r3, sp
 8000596:	3300      	adds	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
    uint8_t idx;

    tx_data[0] = NRF24_HAL_WRITE_REG_CMD | reg_add;
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	701a      	strb	r2, [r3, #0]

    for(idx = 0; idx < data_size; idx++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	77fb      	strb	r3, [r7, #31]
 80005aa:	e00a      	b.n	80005c2 <NRF24_HAL_Write+0x8e>
    {
        tx_data[idx + 1] = data[idx];
 80005ac:	7ffb      	ldrb	r3, [r7, #31]
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	441a      	add	r2, r3
 80005b2:	7ffb      	ldrb	r3, [r7, #31]
 80005b4:	3301      	adds	r3, #1
 80005b6:	7811      	ldrb	r1, [r2, #0]
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	54d1      	strb	r1, [r2, r3]
    for(idx = 0; idx < data_size; idx++)
 80005bc:	7ffb      	ldrb	r3, [r7, #31]
 80005be:	3301      	adds	r3, #1
 80005c0:	77fb      	strb	r3, [r7, #31]
 80005c2:	7ffb      	ldrb	r3, [r7, #31]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	89ba      	ldrh	r2, [r7, #12]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d8ef      	bhi.n	80005ac <NRF24_HAL_Write+0x78>
    }

    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_ENABLE);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fa75 	bl	8000abc <NRF24_HAL_control_spi>

    if(HAL_OK != HAL_SPI_Transmit(&hspi1, tx_data, data_size + 1, time_out))
 80005d2:	6979      	ldr	r1, [r7, #20]
 80005d4:	89bb      	ldrh	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	b29a      	uxth	r2, r3
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <NRF24_HAL_Write+0xcc>)
 80005de:	f001 fed7 	bl	8002390 <HAL_SPI_Transmit>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <NRF24_HAL_Write+0xb8>
    {
        return NRF24_HAL_STATUS_FAIL;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e003      	b.n	80005f4 <NRF24_HAL_Write+0xc0>
    }

    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_DISABLE);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 fa65 	bl	8000abc <NRF24_HAL_control_spi>

    return NRF24_HAL_STATUS_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	46ad      	mov	sp, r5
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bdb0      	pop	{r4, r5, r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000008c 	.word	0x2000008c

08000604 <NRF24_HAL_Read>:
        + time_out: this is time out when SPI transmit.
    Output Parameter:
        + data: this is out_put value of register
*/
NRF24_HAL_STATUS NRF24_HAL_Read(uint8_t reg_add, uint8_t *data, uint16_t data_size, uint16_t time_out)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b08c      	sub	sp, #48	; 0x30
 8000608:	af02      	add	r7, sp, #8
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	4611      	mov	r1, r2
 800060e:	461a      	mov	r2, r3
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	460b      	mov	r3, r1
 8000616:	81bb      	strh	r3, [r7, #12]
 8000618:	4613      	mov	r3, r2
 800061a:	80fb      	strh	r3, [r7, #6]
 800061c:	466b      	mov	r3, sp
 800061e:	461d      	mov	r5, r3
    uint8_t tx_data[data_size + 1];
 8000620:	89bb      	ldrh	r3, [r7, #12]
 8000622:	1c5c      	adds	r4, r3, #1
 8000624:	1e63      	subs	r3, r4, #1
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
 8000628:	4623      	mov	r3, r4
 800062a:	4618      	mov	r0, r3
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	f04f 0200 	mov.w	r2, #0
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	00cb      	lsls	r3, r1, #3
 800063a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800063e:	00c2      	lsls	r2, r0, #3
 8000640:	4623      	mov	r3, r4
 8000642:	4618      	mov	r0, r3
 8000644:	f04f 0100 	mov.w	r1, #0
 8000648:	f04f 0200 	mov.w	r2, #0
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	00cb      	lsls	r3, r1, #3
 8000652:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000656:	00c2      	lsls	r2, r0, #3
 8000658:	4623      	mov	r3, r4
 800065a:	3307      	adds	r3, #7
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	ebad 0d03 	sub.w	sp, sp, r3
 8000664:	ab02      	add	r3, sp, #8
 8000666:	3300      	adds	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    uint8_t rx_data[data_size + 1];
 800066a:	89bb      	ldrh	r3, [r7, #12]
 800066c:	1c5c      	adds	r4, r3, #1
 800066e:	1e63      	subs	r3, r4, #1
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4623      	mov	r3, r4
 8000674:	4618      	mov	r0, r3
 8000676:	f04f 0100 	mov.w	r1, #0
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	f04f 0300 	mov.w	r3, #0
 8000682:	00cb      	lsls	r3, r1, #3
 8000684:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000688:	00c2      	lsls	r2, r0, #3
 800068a:	4623      	mov	r3, r4
 800068c:	4618      	mov	r0, r3
 800068e:	f04f 0100 	mov.w	r1, #0
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	f04f 0300 	mov.w	r3, #0
 800069a:	00cb      	lsls	r3, r1, #3
 800069c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006a0:	00c2      	lsls	r2, r0, #3
 80006a2:	4623      	mov	r3, r4
 80006a4:	3307      	adds	r3, #7
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	ebad 0d03 	sub.w	sp, sp, r3
 80006ae:	ab02      	add	r3, sp, #8
 80006b0:	3300      	adds	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
    uint8_t idx;

    tx_data[0] = NRF24_HAL_READ_REG_CMD | reg_add;
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	7bfa      	ldrb	r2, [r7, #15]
 80006b8:	701a      	strb	r2, [r3, #0]

    for(idx =0; idx < data_size; idx++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80006c0:	e00f      	b.n	80006e2 <NRF24_HAL_Read+0xde>
    {
        tx_data[idx + 1] = NRF24_HAL_DUMMY_BYTE_SPI;
 80006c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006c6:	3301      	adds	r3, #1
 80006c8:	69fa      	ldr	r2, [r7, #28]
 80006ca:	21ff      	movs	r1, #255	; 0xff
 80006cc:	54d1      	strb	r1, [r2, r3]
        rx_data[idx] = 0x00;
 80006ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	2100      	movs	r1, #0
 80006d6:	54d1      	strb	r1, [r2, r3]
    for(idx =0; idx < data_size; idx++)
 80006d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006dc:	3301      	adds	r3, #1
 80006de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80006e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	89ba      	ldrh	r2, [r7, #12]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d8e9      	bhi.n	80006c2 <NRF24_HAL_Read+0xbe>
    }

    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_ENABLE);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f9e4 	bl	8000abc <NRF24_HAL_control_spi>
    if(HAL_OK != HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, data_size + 1, time_out))
 80006f4:	69f9      	ldr	r1, [r7, #28]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	89bb      	ldrh	r3, [r7, #12]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b298      	uxth	r0, r3
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4603      	mov	r3, r0
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <NRF24_HAL_Read+0x130>)
 8000706:	f001 ff7f 	bl	8002608 <HAL_SPI_TransmitReceive>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <NRF24_HAL_Read+0x110>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000710:	2301      	movs	r3, #1
 8000712:	e00a      	b.n	800072a <NRF24_HAL_Read+0x126>
    }
    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_DISABLE);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f9d1 	bl	8000abc <NRF24_HAL_control_spi>
    memcpy(data, rx_data + 1, data_size);
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	89ba      	ldrh	r2, [r7, #12]
 8000720:	4619      	mov	r1, r3
 8000722:	68b8      	ldr	r0, [r7, #8]
 8000724:	f002 fd84 	bl	8003230 <memcpy>
    return NRF24_HAL_STATUS_OK;
 8000728:	2300      	movs	r3, #0
 800072a:	46ad      	mov	sp, r5
}
 800072c:	4618      	mov	r0, r3
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bdb0      	pop	{r4, r5, r7, pc}
 8000734:	2000008c 	.word	0x2000008c

08000738 <NRF24_HAL_CMD>:
        + time_out: this is time out when SPI transmit.
    Output Parameter:
        + data: this is out_put value of register
*/
NRF24_HAL_STATUS NRF24_HAL_CMD(uint8_t cmd, uint8_t *data, uint16_t data_size, uint16_t time_out)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af02      	add	r7, sp, #8
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	4611      	mov	r1, r2
 8000742:	461a      	mov	r2, r3
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	460b      	mov	r3, r1
 800074a:	81bb      	strh	r3, [r7, #12]
 800074c:	4613      	mov	r3, r2
 800074e:	80fb      	strh	r3, [r7, #6]
 8000750:	466b      	mov	r3, sp
 8000752:	461d      	mov	r5, r3
    uint8_t tx_data[data_size + 1];
 8000754:	89bb      	ldrh	r3, [r7, #12]
 8000756:	1c5c      	adds	r4, r3, #1
 8000758:	1e63      	subs	r3, r4, #1
 800075a:	623b      	str	r3, [r7, #32]
 800075c:	4623      	mov	r3, r4
 800075e:	4618      	mov	r0, r3
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	00cb      	lsls	r3, r1, #3
 800076e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000772:	00c2      	lsls	r2, r0, #3
 8000774:	4623      	mov	r3, r4
 8000776:	4618      	mov	r0, r3
 8000778:	f04f 0100 	mov.w	r1, #0
 800077c:	f04f 0200 	mov.w	r2, #0
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	00cb      	lsls	r3, r1, #3
 8000786:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800078a:	00c2      	lsls	r2, r0, #3
 800078c:	4623      	mov	r3, r4
 800078e:	3307      	adds	r3, #7
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	ebad 0d03 	sub.w	sp, sp, r3
 8000798:	ab02      	add	r3, sp, #8
 800079a:	3300      	adds	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
    uint8_t rx_data[data_size + 1];
 800079e:	89bb      	ldrh	r3, [r7, #12]
 80007a0:	1c5c      	adds	r4, r3, #1
 80007a2:	1e63      	subs	r3, r4, #1
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4623      	mov	r3, r4
 80007a8:	4618      	mov	r0, r3
 80007aa:	f04f 0100 	mov.w	r1, #0
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	00cb      	lsls	r3, r1, #3
 80007b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007bc:	00c2      	lsls	r2, r0, #3
 80007be:	4623      	mov	r3, r4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f04f 0100 	mov.w	r1, #0
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	f04f 0300 	mov.w	r3, #0
 80007ce:	00cb      	lsls	r3, r1, #3
 80007d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007d4:	00c2      	lsls	r2, r0, #3
 80007d6:	4623      	mov	r3, r4
 80007d8:	3307      	adds	r3, #7
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	ebad 0d03 	sub.w	sp, sp, r3
 80007e2:	ab02      	add	r3, sp, #8
 80007e4:	3300      	adds	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
    uint8_t idx;

    tx_data[0] =  cmd;
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	7bfa      	ldrb	r2, [r7, #15]
 80007ec:	701a      	strb	r2, [r3, #0]

    for(idx =0; idx < data_size; idx++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007f4:	e00f      	b.n	8000816 <NRF24_HAL_CMD+0xde>
    {
        tx_data[idx + 1] = NRF24_HAL_DUMMY_BYTE_SPI;
 80007f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007fa:	3301      	adds	r3, #1
 80007fc:	69fa      	ldr	r2, [r7, #28]
 80007fe:	21ff      	movs	r1, #255	; 0xff
 8000800:	54d1      	strb	r1, [r2, r3]
        rx_data[idx] = 0x00;
 8000802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	2100      	movs	r1, #0
 800080a:	54d1      	strb	r1, [r2, r3]
    for(idx =0; idx < data_size; idx++)
 800080c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000810:	3301      	adds	r3, #1
 8000812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800081a:	b29b      	uxth	r3, r3
 800081c:	89ba      	ldrh	r2, [r7, #12]
 800081e:	429a      	cmp	r2, r3
 8000820:	d8e9      	bhi.n	80007f6 <NRF24_HAL_CMD+0xbe>
    }

    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_ENABLE);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f94a 	bl	8000abc <NRF24_HAL_control_spi>
    if(HAL_OK != HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, data_size + 1, time_out))
 8000828:	69f9      	ldr	r1, [r7, #28]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	89bb      	ldrh	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	b298      	uxth	r0, r3
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	4603      	mov	r3, r0
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <NRF24_HAL_CMD+0x138>)
 800083a:	f001 fee5 	bl	8002608 <HAL_SPI_TransmitReceive>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <NRF24_HAL_CMD+0x110>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000844:	2301      	movs	r3, #1
 8000846:	e00d      	b.n	8000864 <NRF24_HAL_CMD+0x12c>
    }
    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_DISABLE);
 8000848:	2001      	movs	r0, #1
 800084a:	f000 f937 	bl	8000abc <NRF24_HAL_control_spi>

    if(data != NULL)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d006      	beq.n	8000862 <NRF24_HAL_CMD+0x12a>
    {
        memcpy(data, rx_data + 1, data_size);
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	3301      	adds	r3, #1
 8000858:	89ba      	ldrh	r2, [r7, #12]
 800085a:	4619      	mov	r1, r3
 800085c:	68b8      	ldr	r0, [r7, #8]
 800085e:	f002 fce7 	bl	8003230 <memcpy>
    }
    return NRF24_HAL_STATUS_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	46ad      	mov	sp, r5
}
 8000866:	4618      	mov	r0, r3
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bdb0      	pop	{r4, r5, r7, pc}
 800086e:	bf00      	nop
 8000870:	2000008c 	.word	0x2000008c

08000874 <NRF24_HAL_init_clock>:

/*------------------------------------------------------------------
                           STATIC FUNCTION
  ------------------------------------------------------------------*/
NRF24_HAL_STATUS NRF24_HAL_init_clock(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b090      	sub	sp, #64	; 0x40
 8000878:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	2228      	movs	r2, #40	; 0x28
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fce2 	bl	800324c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 f8fb 	bl	8001ab8 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <NRF24_HAL_init_clock+0x58>
    {
        return NRF24_HAL_STATUS_FAIL;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e015      	b.n	80008f8 <NRF24_HAL_init_clock+0x84>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008dc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fb66 	bl	8001fb8 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <NRF24_HAL_init_clock+0x82>
    {
        return NRF24_HAL_STATUS_FAIL;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <NRF24_HAL_init_clock+0x84>
    }
    return NRF24_HAL_STATUS_OK;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3740      	adds	r7, #64	; 0x40
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <NRF24_HAL_init_spi>:
    + Full Duplex
    + Data size is 8 bit
    + Max Baudrate: 4Mhz 
*/
NRF24_HAL_STATUS NRF24_HAL_init_spi(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <NRF24_HAL_init_spi+0x6c>)
 8000908:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <NRF24_HAL_init_spi+0x68>)
 8000952:	f001 fc99 	bl	8002288 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <NRF24_HAL_init_spi+0x60>
    {
        return NRF24_HAL_STATUS_FAIL;
 800095c:	2301      	movs	r3, #1
 800095e:	e000      	b.n	8000962 <NRF24_HAL_init_spi+0x62>
    }
    return NRF24_HAL_STATUS_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000008c 	.word	0x2000008c
 800096c:	40013000 	.word	0x40013000

08000970 <NRF24_HAL_init_gpio>:

NRF24_HAL_STATUS NRF24_HAL_init_gpio(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <NRF24_HAL_init_gpio+0x9c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <NRF24_HAL_init_gpio+0x9c>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <NRF24_HAL_init_gpio+0x9c>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0320 	and.w	r3, r3, #32
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <NRF24_HAL_init_gpio+0x9c>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <NRF24_HAL_init_gpio+0x9c>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <NRF24_HAL_init_gpio+0x9c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2114      	movs	r1, #20
 80009b8:	4815      	ldr	r0, [pc, #84]	; (8000a10 <NRF24_HAL_init_gpio+0xa0>)
 80009ba:	f001 f84d 	bl	8001a58 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PA2 PA4 */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80009be:	2314      	movs	r3, #20
 80009c0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <NRF24_HAL_init_gpio+0xa0>)
 80009d6:	f000 febb 	bl	8001750 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA3 */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009da:	2308      	movs	r3, #8
 80009dc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <NRF24_HAL_init_gpio+0xa4>)
 80009e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4619      	mov	r1, r3
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <NRF24_HAL_init_gpio+0xa0>)
 80009ee:	f000 feaf 	bl	8001750 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2009      	movs	r0, #9
 80009f8:	f000 fe74 	bl	80016e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009fc:	2009      	movs	r0, #9
 80009fe:	f000 fe8d 	bl	800171c <HAL_NVIC_EnableIRQ>
    return NRF24_HAL_STATUS_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	10110000 	.word	0x10110000

08000a18 <NRF24_HAL_init_timer>:
/*
    This function will config TIMER 1 like
    + Over counter at 1.5 s
*/
NRF24_HAL_STATUS NRF24_HAL_init_timer(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a36:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <NRF24_HAL_init_timer+0xa0>)
 8000a38:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = NRF24_HAL_TIME_PRESCALER;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a3c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000a40:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = NRF24_HAL_TIME_COUNT;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a4a:	f247 5230 	movw	r2, #30000	; 0x7530
 8000a4e:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a64:	f002 f818 	bl	8002a98 <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <NRF24_HAL_init_timer+0x5a>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e01c      	b.n	8000aac <NRF24_HAL_init_timer+0x94>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a80:	f002 f961 	bl	8002d46 <HAL_TIM_ConfigClockSource>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <NRF24_HAL_init_timer+0x76>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <NRF24_HAL_init_timer+0x94>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <NRF24_HAL_init_timer+0x9c>)
 8000a9c:	f002 fb34 	bl	8003108 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <NRF24_HAL_init_timer+0x92>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <NRF24_HAL_init_timer+0x94>
    }
    return NRF24_HAL_STATUS_OK;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000044 	.word	0x20000044
 8000ab8:	40012c00 	.word	0x40012c00

08000abc <NRF24_HAL_control_spi>:

void NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS ctrl_status)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NRF24_HAL_CS_PORT, NRF24_HAL_CS_PIN, ctrl_status);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	2110      	movs	r1, #16
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <NRF24_HAL_control_spi+0x20>)
 8000ace:	f000 ffc3 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40010800 	.word	0x40010800

08000ae0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
        {
            hal_handler.callback_timer();
        }
#endif
    }
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
	...

08000af4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == NRF24_HAL_IRQ_PIN)
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d108      	bne.n	8000b16 <HAL_GPIO_EXTI_Callback+0x22>
    {
    	if(NULL != hal_handler.callback_irq())
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4798      	blx	r3
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <HAL_GPIO_EXTI_Callback+0x22>
        {
            hal_handler.callback_irq();
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4798      	blx	r3
        }
    }
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000003c 	.word	0x2000003c

08000b24 <NRF24_Service_Init>:
        + NULL
    Output Parameter:
        + NULL
*/
NRF24_SERVICE_STATUS NRF24_Service_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Init())
 8000b28:	f7ff fcdc 	bl	80004e4 <NRF24_HAL_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <NRF24_Service_Init+0x12>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <NRF24_Service_Init+0x14>
    }
    return NRF24_SERVICE_STATUS_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <NRF24_SoftReset_Init>:
        + NULL
    Output Parameter:
        + NULL
*/
NRF24_SERVICE_STATUS NRF24_SoftReset_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
    size_t ret;
	uint8_t addr0[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000b42:	4a87      	ldr	r2, [pc, #540]	; (8000d60 <NRF24_SoftReset_Init+0x224>)
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4c:	6018      	str	r0, [r3, #0]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	7019      	strb	r1, [r3, #0]
	uint8_t addr1[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000b52:	4a84      	ldr	r2, [pc, #528]	; (8000d64 <NRF24_SoftReset_Init+0x228>)
 8000b54:	463b      	mov	r3, r7
 8000b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5a:	6018      	str	r0, [r3, #0]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	7019      	strb	r1, [r3, #0]

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_CONFIG, 0x08, 1, 100))
 8000b60:	2364      	movs	r3, #100	; 0x64
 8000b62:	2201      	movs	r2, #1
 8000b64:	2108      	movs	r1, #8
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fce4 	bl	8000534 <NRF24_HAL_Write>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <NRF24_SoftReset_Init+0x3a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e0ef      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_EN_ACK, 0x3F, 1, 100))
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	2201      	movs	r2, #1
 8000b7a:	213f      	movs	r1, #63	; 0x3f
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff fcd9 	bl	8000534 <NRF24_HAL_Write>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d101      	bne.n	8000b8c <NRF24_SoftReset_Init+0x50>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e0e4      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_EN_RXADD, 0x03, 1, 100))
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2103      	movs	r1, #3
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff fcce 	bl	8000534 <NRF24_HAL_Write>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d101      	bne.n	8000ba2 <NRF24_SoftReset_Init+0x66>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e0d9      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_SET_RETRANSMIT, 0x03, 1, 100))
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	2004      	movs	r0, #4
 8000baa:	f7ff fcc3 	bl	8000534 <NRF24_HAL_Write>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <NRF24_SoftReset_Init+0x7c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e0ce      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RF_CHANNEL, 0x02, 1, 100))
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	2005      	movs	r0, #5
 8000bc0:	f7ff fcb8 	bl	8000534 <NRF24_HAL_Write>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d101      	bne.n	8000bce <NRF24_SoftReset_Init+0x92>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0c3      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_SET_RF, 0x07, 1, 100))
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2107      	movs	r1, #7
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f7ff fcad 	bl	8000534 <NRF24_HAL_Write>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d101      	bne.n	8000be4 <NRF24_SoftReset_Init+0xa8>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e0b8      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_STATUS, 0x70, 1, 100))
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	2201      	movs	r2, #1
 8000be8:	2170      	movs	r1, #112	; 0x70
 8000bea:	2007      	movs	r0, #7
 8000bec:	f7ff fca2 	bl	8000534 <NRF24_HAL_Write>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <NRF24_SoftReset_Init+0xbe>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e0ad      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD0, addr0, 5, 100))
 8000bfa:	f107 0108 	add.w	r1, r7, #8
 8000bfe:	2364      	movs	r3, #100	; 0x64
 8000c00:	2205      	movs	r2, #5
 8000c02:	200a      	movs	r0, #10
 8000c04:	f7ff fc96 	bl	8000534 <NRF24_HAL_Write>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d101      	bne.n	8000c12 <NRF24_SoftReset_Init+0xd6>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e0a1      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD1, addr1, 5, 100))
 8000c12:	4639      	mov	r1, r7
 8000c14:	2364      	movs	r3, #100	; 0x64
 8000c16:	2205      	movs	r2, #5
 8000c18:	200b      	movs	r0, #11
 8000c1a:	f7ff fc8b 	bl	8000534 <NRF24_HAL_Write>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <NRF24_SoftReset_Init+0xec>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e096      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_TX_ADD, addr0, 5, 100))
 8000c28:	f107 0108 	add.w	r1, r7, #8
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	2205      	movs	r2, #5
 8000c30:	2010      	movs	r0, #16
 8000c32:	f7ff fc7f 	bl	8000534 <NRF24_HAL_Write>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d101      	bne.n	8000c40 <NRF24_SoftReset_Init+0x104>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e08a      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD2, 0x03, 1, 100))
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	2201      	movs	r2, #1
 8000c44:	2103      	movs	r1, #3
 8000c46:	200c      	movs	r0, #12
 8000c48:	f7ff fc74 	bl	8000534 <NRF24_HAL_Write>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <NRF24_SoftReset_Init+0x11a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e07f      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD3, 0x04, 1, 100))
 8000c56:	2364      	movs	r3, #100	; 0x64
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	200d      	movs	r0, #13
 8000c5e:	f7ff fc69 	bl	8000534 <NRF24_HAL_Write>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <NRF24_SoftReset_Init+0x130>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e074      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD4, 0x05, 1, 100))
 8000c6c:	2364      	movs	r3, #100	; 0x64
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2105      	movs	r1, #5
 8000c72:	200e      	movs	r0, #14
 8000c74:	f7ff fc5e 	bl	8000534 <NRF24_HAL_Write>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d101      	bne.n	8000c82 <NRF24_SoftReset_Init+0x146>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e069      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD5, 0x06, 1, 100))
 8000c82:	2364      	movs	r3, #100	; 0x64
 8000c84:	2201      	movs	r2, #1
 8000c86:	2106      	movs	r1, #6
 8000c88:	200f      	movs	r0, #15
 8000c8a:	f7ff fc53 	bl	8000534 <NRF24_HAL_Write>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d101      	bne.n	8000c98 <NRF24_SoftReset_Init+0x15c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e05e      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P0, 0x00, 1, 100))
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2011      	movs	r0, #17
 8000ca0:	f7ff fc48 	bl	8000534 <NRF24_HAL_Write>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d101      	bne.n	8000cae <NRF24_SoftReset_Init+0x172>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e053      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P1, 0x00, 1, 100))
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2012      	movs	r0, #18
 8000cb6:	f7ff fc3d 	bl	8000534 <NRF24_HAL_Write>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <NRF24_SoftReset_Init+0x188>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e048      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P2, 0x00, 1, 100))
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2013      	movs	r0, #19
 8000ccc:	f7ff fc32 	bl	8000534 <NRF24_HAL_Write>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <NRF24_SoftReset_Init+0x19e>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e03d      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P3, 0x00, 1, 100))
 8000cda:	2364      	movs	r3, #100	; 0x64
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2014      	movs	r0, #20
 8000ce2:	f7ff fc27 	bl	8000534 <NRF24_HAL_Write>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d101      	bne.n	8000cf0 <NRF24_SoftReset_Init+0x1b4>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e032      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P4, 0x00, 1, 100))
 8000cf0:	2364      	movs	r3, #100	; 0x64
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2015      	movs	r0, #21
 8000cf8:	f7ff fc1c 	bl	8000534 <NRF24_HAL_Write>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d101      	bne.n	8000d06 <NRF24_SoftReset_Init+0x1ca>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e027      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P5, 0x00, 1, 100))
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2016      	movs	r0, #22
 8000d0e:	f7ff fc11 	bl	8000534 <NRF24_HAL_Write>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d101      	bne.n	8000d1c <NRF24_SoftReset_Init+0x1e0>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e01c      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_DYNAMIC_PLD, 0x00, 1, 100))
 8000d1c:	2364      	movs	r3, #100	; 0x64
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2100      	movs	r1, #0
 8000d22:	201c      	movs	r0, #28
 8000d24:	f7ff fc06 	bl	8000534 <NRF24_HAL_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d101      	bne.n	8000d32 <NRF24_SoftReset_Init+0x1f6>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e011      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_FEATURE, 0x00, 1, 100))
 8000d32:	2364      	movs	r3, #100	; 0x64
 8000d34:	2201      	movs	r2, #1
 8000d36:	2100      	movs	r1, #0
 8000d38:	201d      	movs	r0, #29
 8000d3a:	f7ff fbfb 	bl	8000534 <NRF24_HAL_Write>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d101      	bne.n	8000d48 <NRF24_SoftReset_Init+0x20c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e006      	b.n	8000d56 <NRF24_SoftReset_Init+0x21a>
    }

    hal_handler.callback_irq    = NRF24_Handle_IRQ_Pin_Signal;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <NRF24_SoftReset_Init+0x22c>)
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <NRF24_SoftReset_Init+0x230>)
 8000d4c:	601a      	str	r2, [r3, #0]
    hal_handler.callback_timer  = NRF24_Handle_Timer_IRQ;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <NRF24_SoftReset_Init+0x22c>)
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <NRF24_SoftReset_Init+0x234>)
 8000d52:	605a      	str	r2, [r3, #4]

    return NRF24_SERVICE_STATUS_OK;
 8000d54:	2300      	movs	r3, #0
};
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	08003274 	.word	0x08003274
 8000d64:	0800327c 	.word	0x0800327c
 8000d68:	2000003c 	.word	0x2000003c
 8000d6c:	08001411 	.word	0x08001411
 8000d70:	080014c5 	.word	0x080014c5

08000d74 <NRF24_GetIRQ_Status>:
        + NULL
    Output Parameter:
        + Return value of NRF24_IRQ enum
*/
NRF24_IRQ NRF24_GetIRQ_Status(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
    uint8_t status_data = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71fb      	strb	r3, [r7, #7]
    
    status_data = NRF24_get_status_reg();
 8000d7e:	f000 fb01 	bl	8001384 <NRF24_get_status_reg>
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
    if(status_data == 0xFF)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2bff      	cmp	r3, #255	; 0xff
 8000d8a:	d101      	bne.n	8000d90 <NRF24_GetIRQ_Status+0x1c>
    {
        return NRF24_IRQ_INVALID;
 8000d8c:	23ff      	movs	r3, #255	; 0xff
 8000d8e:	e018      	b.n	8000dc2 <NRF24_GetIRQ_Status+0x4e>
    } 

    status_data = ~status_data;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	71fb      	strb	r3, [r7, #7]

    if((status_data & NRF24_IRQ_RX_DATA_READY) == NRF24_IRQ_RX_DATA_READY)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 0320 	and.w	r3, r3, #32
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <NRF24_GetIRQ_Status+0x30>
    {
        return NRF24_IRQ_RX_DATA_READY;
 8000da0:	2320      	movs	r3, #32
 8000da2:	e00e      	b.n	8000dc2 <NRF24_GetIRQ_Status+0x4e>
    }
    else if((status_data & NRF24_IRQ_TX_DATA_SENT) == NRF24_IRQ_TX_DATA_SENT)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <NRF24_GetIRQ_Status+0x3e>
    {
        return NRF24_IRQ_TX_DATA_SENT;
 8000dae:	2310      	movs	r3, #16
 8000db0:	e007      	b.n	8000dc2 <NRF24_GetIRQ_Status+0x4e>
    }
    else if((status_data & NRF24_IRQ_MAX_RETRANSMIT) == NRF24_IRQ_MAX_RETRANSMIT)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <NRF24_GetIRQ_Status+0x4c>
    {
        return NRF24_IRQ_MAX_RETRANSMIT;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	e000      	b.n	8000dc2 <NRF24_GetIRQ_Status+0x4e>
    }

    return NRF24_IRQ_INVALID;
 8000dc0:	23ff      	movs	r3, #255	; 0xff
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <NRF24_SetAddress>:
        + addr_size: this is size of address input
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_SetAddress(uint8_t pipe_idx, uint8_t *address,uint8_t addr_size)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
    if(pipe_idx > 6)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d901      	bls.n	8000de6 <NRF24_SetAddress+0x1a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e034      	b.n	8000e50 <NRF24_SetAddress+0x84>
    }

    if((addr_size > 5) || (addr_size < 0))
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d901      	bls.n	8000df0 <NRF24_SetAddress+0x24>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e02f      	b.n	8000e50 <NRF24_SetAddress+0x84>
    }

    switch (nRF24_address_regs[pipe_idx])
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <NRF24_SetAddress+0x8c>)
 8000df4:	5cd3      	ldrb	r3, [r2, r3]
 8000df6:	2b0a      	cmp	r3, #10
 8000df8:	d001      	beq.n	8000dfe <NRF24_SetAddress+0x32>
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d117      	bne.n	8000e2e <NRF24_SetAddress+0x62>
          must be had same address like each other
        */
        case NRF24_REG_RX_ADD0:
        case NRF24_REG_TX_ADD:
            {
                if(NRF24_HAL_Write(NRF24_REG_RX_ADD0, address, addr_size, 100) != NRF24_SERVICE_STATUS_OK)
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	2364      	movs	r3, #100	; 0x64
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	200a      	movs	r0, #10
 8000e08:	f7ff fb94 	bl	8000534 <NRF24_HAL_Write>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <NRF24_SetAddress+0x4a>
                {
                    return NRF24_SERVICE_STATUS_FAIL;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e01c      	b.n	8000e50 <NRF24_SetAddress+0x84>
                }

                if(NRF24_HAL_Write(NRF24_REG_TX_ADD, address, addr_size, 100) != NRF24_SERVICE_STATUS_OK)
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	2364      	movs	r3, #100	; 0x64
 8000e1c:	6839      	ldr	r1, [r7, #0]
 8000e1e:	2010      	movs	r0, #16
 8000e20:	f7ff fb88 	bl	8000534 <NRF24_HAL_Write>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00e      	beq.n	8000e48 <NRF24_SetAddress+0x7c>
                {
                    return NRF24_SERVICE_STATUS_FAIL;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e010      	b.n	8000e50 <NRF24_SetAddress+0x84>
            }
            break;
        
        default:
            {
                if(NRF24_HAL_Write(nRF24_address_regs[pipe_idx], address, 1, 100) != NRF24_SERVICE_STATUS_OK)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <NRF24_SetAddress+0x8c>)
 8000e32:	5cd0      	ldrb	r0, [r2, r3]
 8000e34:	2364      	movs	r3, #100	; 0x64
 8000e36:	2201      	movs	r2, #1
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	f7ff fb7b 	bl	8000534 <NRF24_HAL_Write>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <NRF24_SetAddress+0x80>
                {
                    return NRF24_SERVICE_STATUS_FAIL;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e003      	b.n	8000e50 <NRF24_SetAddress+0x84>
            break;
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <NRF24_SetAddress+0x82>
                }
            }
            break;
 8000e4c:	bf00      	nop
    }    
    return NRF24_SERVICE_STATUS_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000000c 	.word	0x2000000c

08000e5c <NRF24_En_Dis_PIPE>:
                 If is_en is true, that mean the RX PIPE will be enabled.
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_En_Dis_PIPE(NRF24_ENABLE_RX_PIPE pipe, bool is_en)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	460a      	mov	r2, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
    uint8_t data_reg = 0xFF;
 8000e6c:	23ff      	movs	r3, #255	; 0xff
 8000e6e:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_EN_RXADD, &data_reg, 1, 100))
 8000e70:	f107 010f 	add.w	r1, r7, #15
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	2201      	movs	r2, #1
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff fbc3 	bl	8000604 <NRF24_HAL_Read>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <NRF24_En_Dis_PIPE+0x2c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e022      	b.n	8000ece <NRF24_En_Dis_PIPE+0x72>
    }

    if(is_en)
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <NRF24_En_Dis_PIPE+0x3e>
    {
        data_reg = data_reg | pipe;
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e00c      	b.n	8000eb4 <NRF24_En_Dis_PIPE+0x58>
    }
    else
    {
        data_reg = ~data_reg;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
        data_reg = data_reg | pipe;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	73fb      	strb	r3, [r7, #15]
        data_reg = ~data_reg;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	73fb      	strb	r3, [r7, #15]
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_EN_RXADD, &data_reg, 1, 100))
 8000eb4:	f107 010f 	add.w	r1, r7, #15
 8000eb8:	2364      	movs	r3, #100	; 0x64
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f7ff fb39 	bl	8000534 <NRF24_HAL_Write>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <NRF24_En_Dis_PIPE+0x70>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <NRF24_En_Dis_PIPE+0x72>
    }

    return NRF24_SERVICE_STATUS_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <NRF24_Set_RX_TX>:
        + trans_mode: this is value will set into PRIM_RX bit in CONFIG register
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE trans_mode)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8000ee4:	f107 010f 	add.w	r1, r7, #15
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	2201      	movs	r2, #1
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fb89 	bl	8000604 <NRF24_HAL_Read>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <NRF24_Set_RX_TX+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e01e      	b.n	8000f3a <NRF24_Set_RX_TX+0x64>
    }

    switch (trans_mode)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <NRF24_Set_RX_TX+0x32>
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d006      	beq.n	8000f14 <NRF24_Set_RX_TX+0x3e>
 8000f06:	e00b      	b.n	8000f20 <NRF24_Set_RX_TX+0x4a>
    {
        case NRF24_TRANSCIVER_MODE_TX:
            {
                /*Because, PRIM_RX bit is first bit in CONFIG reg*/
                data_reg = data_reg & 0x7E;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8000f12:	e005      	b.n	8000f20 <NRF24_Set_RX_TX+0x4a>

        case NRF24_TRANSCIVER_MODE_RX:
            {
                data_reg |= trans_mode;
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8000f1e:	bf00      	nop
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8000f20:	f107 010f 	add.w	r1, r7, #15
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	2201      	movs	r2, #1
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fb03 	bl	8000534 <NRF24_HAL_Write>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <NRF24_Set_RX_TX+0x62>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <NRF24_Set_RX_TX+0x64>
    }
    return NRF24_SERVICE_STATUS_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <NRF24_Set_CRC_encoding>:
        + trans_mode: this is value will set into CRCO and EN_CRC bits in CONFIG register
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_CRC_encoding(NRF24_CRC_ENCODE no_byte)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8000f50:	f107 010f 	add.w	r1, r7, #15
 8000f54:	2364      	movs	r3, #100	; 0x64
 8000f56:	2201      	movs	r2, #1
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fb53 	bl	8000604 <NRF24_HAL_Read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <NRF24_Set_CRC_encoding+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e032      	b.n	8000fce <NRF24_Set_CRC_encoding+0x8c>
    }

    switch (no_byte)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b0c      	cmp	r3, #12
 8000f6c:	d017      	beq.n	8000f9e <NRF24_Set_CRC_encoding+0x5c>
 8000f6e:	2b0c      	cmp	r3, #12
 8000f70:	dc20      	bgt.n	8000fb4 <NRF24_Set_CRC_encoding+0x72>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <NRF24_Set_CRC_encoding+0x3a>
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d006      	beq.n	8000f88 <NRF24_Set_CRC_encoding+0x46>
 8000f7a:	e01b      	b.n	8000fb4 <NRF24_Set_CRC_encoding+0x72>
            {
                /*
                    Because, CRCO bit is third bit in CONFIG reg
                    and EN_CRC bit is forth bit in CONFIG reg
                */
                data_reg = data_reg & 0x73;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f003 0373 	and.w	r3, r3, #115	; 0x73
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8000f86:	e015      	b.n	8000fb4 <NRF24_Set_CRC_encoding+0x72>
            {
                /*
                    Because, CRCO bit is third bit in CONFIG reg
                    and EN_CRC bit is forth bit in CONFIG reg
                */
                data_reg = (data_reg & 0x73) | NRF24_CRC_ENCODE_1BYTE;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	f003 0373 	and.w	r3, r3, #115	; 0x73
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8000f9c:	e00a      	b.n	8000fb4 <NRF24_Set_CRC_encoding+0x72>
            {
                /*
                    Because, CRCO bit is third bit in CONFIG reg
                    and EN_CRC bit is forth bit in CONFIG reg
                */
                data_reg = (data_reg & 0x73) | NRF24_CRC_ENCODE_2BYTE;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	f003 0373 	and.w	r3, r3, #115	; 0x73
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	f043 030c 	orr.w	r3, r3, #12
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8000fb2:	bf00      	nop
    }   

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8000fb4:	f107 010f 	add.w	r1, r7, #15
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fab9 	bl	8000534 <NRF24_HAL_Write>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <NRF24_Set_CRC_encoding+0x8a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <NRF24_Set_CRC_encoding+0x8c>
    }
    return NRF24_SERVICE_STATUS_OK; 
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <NRF24_Config_IRQ_Mask>:
        + irq_en: this is used to allow enable or disable interrupt of NRF24L01
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Config_IRQ_Mask(NRF24_CONFIG_IRQ_MASK irq_mask, bool irq_en)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460a      	mov	r2, r1
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	71bb      	strb	r3, [r7, #6]
    uint8_t data_reg = 0x08;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8000fea:	f107 010f 	add.w	r1, r7, #15
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fb06 	bl	8000604 <NRF24_HAL_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <NRF24_Config_IRQ_Mask+0x2c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e022      	b.n	8001048 <NRF24_Config_IRQ_Mask+0x72>
    }

    if(irq_en)
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <NRF24_Config_IRQ_Mask+0x3e>
    {
        data_reg = data_reg | irq_mask;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4313      	orrs	r3, r2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e00c      	b.n	800102e <NRF24_Config_IRQ_Mask+0x58>
    }
    else
    {
        data_reg = ~data_reg;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	43db      	mvns	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
        data_reg = data_reg | irq_mask;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4313      	orrs	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	73fb      	strb	r3, [r7, #15]
        data_reg = ~data_reg;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	43db      	mvns	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
    }   

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_CONFIG, &data_reg, 1, 100))
 800102e:	f107 010f 	add.w	r1, r7, #15
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	2201      	movs	r2, #1
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fa7c 	bl	8000534 <NRF24_HAL_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <NRF24_Config_IRQ_Mask+0x70>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <NRF24_Config_IRQ_Mask+0x72>
    }
    return NRF24_SERVICE_STATUS_OK; 
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <NRF24_Set_Addr_Width>:
                     into AW bit of SETUP_AW register
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_Addr_Width(NRF24_SET_ADDR_WIDTH add_width)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_CONFIG, &add_width, 1, 100))
 800105a:	1df9      	adds	r1, r7, #7
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	2201      	movs	r2, #1
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fa67 	bl	8000534 <NRF24_HAL_Write>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <NRF24_Set_Addr_Width+0x20>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <NRF24_Set_Addr_Width+0x22>
    }
    return NRF24_SERVICE_STATUS_OK; 
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <NRF24_Set_Auto_Retransmit_Delay>:
                    into AW bit of ARD register of SETUP_RETR
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_Auto_Retransmit_Delay(NRF24_RETRANSMIT_DELAY delay_rt)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8001084:	2308      	movs	r3, #8
 8001086:	73bb      	strb	r3, [r7, #14]
    uint8_t set_value;

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_SET_RETRANSMIT, &data_reg, 1, 100))
 8001088:	f107 010e 	add.w	r1, r7, #14
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	2201      	movs	r2, #1
 8001090:	2004      	movs	r0, #4
 8001092:	f7ff fab7 	bl	8000604 <NRF24_HAL_Read>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <NRF24_Set_Auto_Retransmit_Delay+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800109c:	2301      	movs	r3, #1
 800109e:	e014      	b.n	80010ca <NRF24_Set_Auto_Retransmit_Delay+0x50>
    }

    set_value = (delay_rt << 4) & 0xF0;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	73fb      	strb	r3, [r7, #15]
    data_reg = data_reg | set_value;
 80010a6:	7bba      	ldrb	r2, [r7, #14]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	73bb      	strb	r3, [r7, #14]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_SET_RETRANSMIT, &data_reg, 1, 100))
 80010b0:	f107 010e 	add.w	r1, r7, #14
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	2004      	movs	r0, #4
 80010ba:	f7ff fa3b 	bl	8000534 <NRF24_HAL_Write>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <NRF24_Set_Auto_Retransmit_Delay+0x4e>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <NRF24_Set_Auto_Retransmit_Delay+0x50>
    }
    return NRF24_SERVICE_STATUS_OK;     
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <NRF24_Set_Auto_Retransmit_Count>:
        + set_count: this is value will set no of retranmit
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_Auto_Retransmit_Count(uint8_t set_count)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 80010dc:	2308      	movs	r3, #8
 80010de:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_SET_RETRANSMIT, &data_reg, 1, 100))
 80010e0:	f107 010f 	add.w	r1, r7, #15
 80010e4:	2364      	movs	r3, #100	; 0x64
 80010e6:	2201      	movs	r2, #1
 80010e8:	2004      	movs	r0, #4
 80010ea:	f7ff fa8b 	bl	8000604 <NRF24_HAL_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <NRF24_Set_Auto_Retransmit_Count+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e011      	b.n	800111c <NRF24_Set_Auto_Retransmit_Count+0x4a>
    }

    data_reg = data_reg | set_count;
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_SET_RETRANSMIT, &data_reg, 1, 100))
 8001102:	f107 010f 	add.w	r1, r7, #15
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	2201      	movs	r2, #1
 800110a:	2004      	movs	r0, #4
 800110c:	f7ff fa12 	bl	8000534 <NRF24_HAL_Write>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <NRF24_Set_Auto_Retransmit_Count+0x48>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <NRF24_Set_Auto_Retransmit_Count+0x4a>
    }
    return NRF24_SERVICE_STATUS_OK;        
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <NRF24_Set_RF_Channel>:
        + rf_channel: this is value will rf channel of device
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_RF_Channel(uint8_t rf_channel)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 800112e:	2308      	movs	r3, #8
 8001130:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_RF_CHANNEL, &data_reg, 1, 100))
 8001132:	f107 010f 	add.w	r1, r7, #15
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	2201      	movs	r2, #1
 800113a:	2005      	movs	r0, #5
 800113c:	f7ff fa62 	bl	8000604 <NRF24_HAL_Read>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <NRF24_Set_RF_Channel+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001146:	2301      	movs	r3, #1
 8001148:	e011      	b.n	800116e <NRF24_Set_RF_Channel+0x4a>
    }

    data_reg = data_reg | rf_channel;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4313      	orrs	r3, r2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_RF_CHANNEL, &data_reg, 1, 100))
 8001154:	f107 010f 	add.w	r1, r7, #15
 8001158:	2364      	movs	r3, #100	; 0x64
 800115a:	2201      	movs	r2, #1
 800115c:	2005      	movs	r0, #5
 800115e:	f7ff f9e9 	bl	8000534 <NRF24_HAL_Write>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <NRF24_Set_RF_Channel+0x48>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <NRF24_Set_RF_Channel+0x4a>
    }
    return NRF24_SERVICE_STATUS_OK;   
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <NRF24_Set_RF_Data_Rate>:
        + data_rate: this is value will rf data rate of device
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_RF_Data_Rate(NRF24_DATA_RATE data_rate)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8001180:	2308      	movs	r3, #8
 8001182:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_SET_RF, &data_reg, 1, 100))
 8001184:	f107 010f 	add.w	r1, r7, #15
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	2201      	movs	r2, #1
 800118c:	2006      	movs	r0, #6
 800118e:	f7ff fa39 	bl	8000604 <NRF24_HAL_Read>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <NRF24_Set_RF_Data_Rate+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001198:	2301      	movs	r3, #1
 800119a:	e011      	b.n	80011c0 <NRF24_Set_RF_Data_Rate+0x4a>
    }

    data_reg = data_reg | data_rate;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_SET_RF, &data_reg, 1, 100))
 80011a6:	f107 010f 	add.w	r1, r7, #15
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	2201      	movs	r2, #1
 80011ae:	2006      	movs	r0, #6
 80011b0:	f7ff f9c0 	bl	8000534 <NRF24_HAL_Write>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <NRF24_Set_RF_Data_Rate+0x48>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <NRF24_Set_RF_Data_Rate+0x4a>
    }
    return NRF24_SERVICE_STATUS_OK;  
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <NRF24_Set_RF_PWR>:
        + data_rate: this is value will rf pwr transmit of device
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_RF_PWR(NRF24_OUTPUT_PWR rf_pwr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 80011d2:	2308      	movs	r3, #8
 80011d4:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_SET_RF, &data_reg, 1, 100))
 80011d6:	f107 010f 	add.w	r1, r7, #15
 80011da:	2364      	movs	r3, #100	; 0x64
 80011dc:	2201      	movs	r2, #1
 80011de:	2006      	movs	r0, #6
 80011e0:	f7ff fa10 	bl	8000604 <NRF24_HAL_Read>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <NRF24_Set_RF_PWR+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e011      	b.n	8001212 <NRF24_Set_RF_PWR+0x4a>
    }

    data_reg = data_reg | rf_pwr;
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_SET_RF, &data_reg, 1, 100))
 80011f8:	f107 010f 	add.w	r1, r7, #15
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	2201      	movs	r2, #1
 8001200:	2006      	movs	r0, #6
 8001202:	f7ff f997 	bl	8000534 <NRF24_HAL_Write>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <NRF24_Set_RF_PWR+0x48>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <NRF24_Set_RF_PWR+0x4a>
    }
    return NRF24_SERVICE_STATUS_OK;  
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <NRF24_Get_TX_FIFO_Status>:
        + NULL
    Output Parameter:
        + Return value of TX FIFO in FIFO_STATUS register
*/
NRF24_TXFIFO_STATUS  NRF24_Get_TX_FIFO_Status(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
    uint8_t data_reg;
    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_FIFO_STATUS, &data_reg, 1, 100))
 8001220:	1df9      	adds	r1, r7, #7
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	2201      	movs	r2, #1
 8001226:	2017      	movs	r0, #23
 8001228:	f7ff f9ec 	bl	8000604 <NRF24_HAL_Read>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <NRF24_Get_TX_FIFO_Status+0x1c>
    {
        return NRF24_RECEIVE_PWR_NONE;
 8001232:	2300      	movs	r3, #0
 8001234:	e002      	b.n	800123c <NRF24_Get_TX_FIFO_Status+0x22>
    }

    return (NRF24_TXFIFO_STATUS)(data_reg >> 4);    
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <NRF24_Set_DYNPLD_For_PIPE>:
        + mode: this is used to know which mode is used
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_DYNPLD_For_PIPE(uint8_t pipe_idx, NRF24_DYNAMIC_PLD mode)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	4613      	mov	r3, r2
 8001252:	71bb      	strb	r3, [r7, #6]
    uint8_t data_reg;

    if(pipe_idx > NRF24_MAX_PIPE_IDX)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b05      	cmp	r3, #5
 8001258:	d901      	bls.n	800125e <NRF24_Set_DYNPLD_For_PIPE+0x1a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800125a:	2301      	movs	r3, #1
 800125c:	e037      	b.n	80012ce <NRF24_Set_DYNPLD_For_PIPE+0x8a>
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_DYNAMIC_PLD, &data_reg, 1, 100))
 800125e:	f107 010f 	add.w	r1, r7, #15
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	2201      	movs	r2, #1
 8001266:	201c      	movs	r0, #28
 8001268:	f7ff f9cc 	bl	8000604 <NRF24_HAL_Read>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <NRF24_Set_DYNPLD_For_PIPE+0x32>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001272:	2301      	movs	r3, #1
 8001274:	e02b      	b.n	80012ce <NRF24_Set_DYNPLD_For_PIPE+0x8a>
    }

    switch (mode)
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00d      	beq.n	8001298 <NRF24_Set_DYNPLD_For_PIPE+0x54>
 800127c:	2b01      	cmp	r3, #1
 800127e:	d119      	bne.n	80012b4 <NRF24_Set_DYNPLD_For_PIPE+0x70>
    {
        case NRF24_DYNAMIC_PLD_ON:
        {
            data_reg = data_reg | (0x01 << pipe_idx);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2201      	movs	r2, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	b25a      	sxtb	r2, r3
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	b25b      	sxtb	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b25b      	sxtb	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8001296:	e00d      	b.n	80012b4 <NRF24_Set_DYNPLD_For_PIPE+0x70>

        case NRF24_DYNAMIC_PLD_OFF:
        {
            data_reg = data_reg & (~(0x01 << pipe_idx));
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2201      	movs	r2, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	4013      	ands	r3, r2
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80012b2:	bf00      	nop
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_DYNAMIC_PLD, &data_reg, 1, 100))
 80012b4:	f107 010f 	add.w	r1, r7, #15
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	2201      	movs	r2, #1
 80012bc:	201c      	movs	r0, #28
 80012be:	f7ff f939 	bl	8000534 <NRF24_HAL_Write>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <NRF24_Set_DYNPLD_For_PIPE+0x88>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <NRF24_Set_DYNPLD_For_PIPE+0x8a>
    }

    return NRF24_SERVICE_STATUS_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <NRF24_Read_RX_PLD>:
    Output Parameter:
        + pld: this is data rx payload.
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Read_RX_PLD(NRF24_RX_PLD *pld)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
    uint8_t status_reg = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]

    status_reg = NRF24_get_status_reg();
 80012e2:	f000 f84f 	bl	8001384 <NRF24_get_status_reg>
 80012e6:	4603      	mov	r3, r0
 80012e8:	73fb      	strb	r3, [r7, #15]
    if(0xFF == status_reg)
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2bff      	cmp	r3, #255	; 0xff
 80012ee:	d101      	bne.n	80012f4 <NRF24_Read_RX_PLD+0x1e>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e022      	b.n	800133a <NRF24_Read_RX_PLD+0x64>
    }

    /*Because Pipe idx is in 3 bit from second to fourth bit of STATUS register*/
    pld->pipe_idx = (status_reg >> 1) & 0x07;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	701a      	strb	r2, [r3, #0]

    pld->pld_size = NRF24_get_pld_size_of_rx_pipe(pld->pipe_idx);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f850 	bl	80013ae <NRF24_get_pld_size_of_rx_pipe>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    if(pld->pld_size == 0x00)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <NRF24_Read_RX_PLD+0x50>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001322:	2301      	movs	r3, #1
 8001324:	e009      	b.n	800133a <NRF24_Read_RX_PLD+0x64>
    }

    return NRF24_get_pld_data_in_RX_FIFO(pld->data_pld, pld->pld_size);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001330:	4619      	mov	r1, r3
 8001332:	4610      	mov	r0, r2
 8001334:	f000 f855 	bl	80013e2 <NRF24_get_pld_data_in_RX_FIFO>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <NRF24_Write_TX_PLD_ACK>:
        + pipe_idx
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Write_TX_PLD_ACK(uint8_t pipe_idx, uint8_t *data, uint8_t data_size)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	6039      	str	r1, [r7, #0]
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	4613      	mov	r3, r2
 8001350:	71bb      	strb	r3, [r7, #6]
    if(pipe_idx > NRF24_MAX_PIPE_IDX)
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2b05      	cmp	r3, #5
 8001356:	d901      	bls.n	800135c <NRF24_Write_TX_PLD_ACK+0x1a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001358:	2301      	movs	r3, #1
 800135a:	e00f      	b.n	800137c <NRF24_Write_TX_PLD_ACK+0x3a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_CMD(NRF24_CMD_W_ACK_PAYLOAD | pipe_idx, data, data_size, 1))
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001362:	b2d8      	uxtb	r0, r3
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	b29a      	uxth	r2, r3
 8001368:	2301      	movs	r3, #1
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	f7ff f9e4 	bl	8000738 <NRF24_HAL_CMD>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <NRF24_Write_TX_PLD_ACK+0x38>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <NRF24_Write_TX_PLD_ACK+0x3a>
    }

    return NRF24_SERVICE_STATUS_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <NRF24_get_status_reg>:
        + NULL
    Output Parameter:
        + Return value of STATUS register
*/
static uint8_t NRF24_get_status_reg(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
    uint8_t status_data = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]
    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Read(NRF24_REG_STATUS, &status_data, 1, 100))
 800138e:	1df9      	adds	r1, r7, #7
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	2201      	movs	r2, #1
 8001394:	2007      	movs	r0, #7
 8001396:	f7ff f935 	bl	8000604 <NRF24_HAL_Read>
 800139a:	4603      	mov	r3, r0
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <NRF24_get_status_reg+0x20>
    {
        return 0xFF;
 80013a0:	23ff      	movs	r3, #255	; 0xff
 80013a2:	e000      	b.n	80013a6 <NRF24_get_status_reg+0x22>
    }
    return status_data;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <NRF24_get_pld_size_of_rx_pipe>:
        + pipe_idx: this is pipe index
    Output Parameter:
        + Return no of byte in RX FIFO
*/
static uint8_t NRF24_get_pld_size_of_rx_pipe(uint8_t pipe_idx)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Read(NRF24_REG_RX_PW_P0 + pipe_idx, &data_reg, 1, 100))
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	3311      	adds	r3, #17
 80013c0:	b2d8      	uxtb	r0, r3
 80013c2:	f107 010f 	add.w	r1, r7, #15
 80013c6:	2364      	movs	r3, #100	; 0x64
 80013c8:	2201      	movs	r2, #1
 80013ca:	f7ff f91b 	bl	8000604 <NRF24_HAL_Read>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <NRF24_get_pld_size_of_rx_pipe+0x2a>
    {
        return 0x00;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e000      	b.n	80013da <NRF24_get_pld_size_of_rx_pipe+0x2c>
    }
    return data_reg;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <NRF24_get_pld_data_in_RX_FIFO>:
    Output Parameter:
        + pld: this is array data PLD packet
        + Return status to know the process is success or failed
*/
static NRF24_SERVICE_STATUS NRF24_get_pld_data_in_RX_FIFO(uint8_t *pld, uint8_t pld_size)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70fb      	strb	r3, [r7, #3]
    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_CMD(NRF24_CMD_READ_RX_PAYLOAD, &pld, 1, 100))
 80013ee:	1d39      	adds	r1, r7, #4
 80013f0:	2364      	movs	r3, #100	; 0x64
 80013f2:	2201      	movs	r2, #1
 80013f4:	2061      	movs	r0, #97	; 0x61
 80013f6:	f7ff f99f 	bl	8000738 <NRF24_HAL_CMD>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <NRF24_get_pld_data_in_RX_FIFO+0x22>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <NRF24_get_pld_data_in_RX_FIFO+0x24>
    }
    return NRF24_SERVICE_STATUS_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <NRF24_Handle_IRQ_Pin_Signal>:
        + NULL
    Output Parameter:
        + NULL
*/
static uint8_t NRF24_Handle_IRQ_Pin_Signal(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
    NRF24_IRQ irq_status;

    irq_status = NRF24_GetIRQ_Status();
 8001416:	f7ff fcad 	bl	8000d74 <NRF24_GetIRQ_Status>
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]

    switch (irq_status)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b20      	cmp	r3, #32
 8001422:	d006      	beq.n	8001432 <NRF24_Handle_IRQ_Pin_Signal+0x22>
 8001424:	2b20      	cmp	r3, #32
 8001426:	dc44      	bgt.n	80014b2 <NRF24_Handle_IRQ_Pin_Signal+0xa2>
 8001428:	2b08      	cmp	r3, #8
 800142a:	d018      	beq.n	800145e <NRF24_Handle_IRQ_Pin_Signal+0x4e>
 800142c:	2b10      	cmp	r3, #16
 800142e:	d026      	beq.n	800147e <NRF24_Handle_IRQ_Pin_Signal+0x6e>
 8001430:	e03f      	b.n	80014b2 <NRF24_Handle_IRQ_Pin_Signal+0xa2>
    {
        case NRF24_IRQ_RX_DATA_READY:
            {
                if(NRF24_SERVICE_STATUS_FAIL == NRF24_Read_RX_PLD(&global_rx_pkt))
 8001432:	4822      	ldr	r0, [pc, #136]	; (80014bc <NRF24_Handle_IRQ_Pin_Signal+0xac>)
 8001434:	f7ff ff4f 	bl	80012d6 <NRF24_Read_RX_PLD>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d105      	bne.n	800144a <NRF24_Handle_IRQ_Pin_Signal+0x3a>
                {
                    memset(&global_rx_pkt, 0, sizeof(NRF24_RX_PLD));
 800143e:	2222      	movs	r2, #34	; 0x22
 8001440:	2100      	movs	r1, #0
 8001442:	481e      	ldr	r0, [pc, #120]	; (80014bc <NRF24_Handle_IRQ_Pin_Signal+0xac>)
 8001444:	f001 ff02 	bl	800324c <memset>
                    nrf24_ser_handler.transmit_done = false;
                    nrf24_ser_handler.rx_data_ready = true;
                    nrf24_ser_handler.transmit_err  = false;
                }
            }
            break;
 8001448:	e033      	b.n	80014b2 <NRF24_Handle_IRQ_Pin_Signal+0xa2>
                    nrf24_ser_handler.transmit_done = false;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 800144c:	2200      	movs	r2, #0
 800144e:	709a      	strb	r2, [r3, #2]
                    nrf24_ser_handler.rx_data_ready = true;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 8001452:	2201      	movs	r2, #1
 8001454:	70da      	strb	r2, [r3, #3]
                    nrf24_ser_handler.transmit_err  = false;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 8001458:	2200      	movs	r2, #0
 800145a:	711a      	strb	r2, [r3, #4]
            break;
 800145c:	e029      	b.n	80014b2 <NRF24_Handle_IRQ_Pin_Signal+0xa2>
        
        case NRF24_IRQ_MAX_RETRANSMIT:
            {
                (void)NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE_RX);
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff fd39 	bl	8000ed6 <NRF24_Set_RX_TX>
                nrf24_ser_handler.mode          = NRF24_TRANSCIVER_MODE_RX;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 8001466:	2201      	movs	r2, #1
 8001468:	715a      	strb	r2, [r3, #5]
                nrf24_ser_handler.transmit_done = false;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 800146c:	2200      	movs	r2, #0
 800146e:	709a      	strb	r2, [r3, #2]
                nrf24_ser_handler.rx_data_ready = false;
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 8001472:	2200      	movs	r2, #0
 8001474:	70da      	strb	r2, [r3, #3]
                nrf24_ser_handler.transmit_err  = true;
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 8001478:	2201      	movs	r2, #1
 800147a:	711a      	strb	r2, [r3, #4]
            }
            break;
 800147c:	e019      	b.n	80014b2 <NRF24_Handle_IRQ_Pin_Signal+0xa2>
        
        case NRF24_IRQ_TX_DATA_SENT:
            {
                if((NRF24_TXFIFO_STATUS_ERROR == NRF24_Get_TX_FIFO_Status()) ||\
 800147e:	f7ff fecc 	bl	800121a <NRF24_Get_TX_FIFO_Status>
 8001482:	4603      	mov	r3, r0
 8001484:	2b03      	cmp	r3, #3
 8001486:	d004      	beq.n	8001492 <NRF24_Handle_IRQ_Pin_Signal+0x82>
                   (NRF24_TXFIFO_STATUS_EMPTY == NRF24_Get_TX_FIFO_Status()))
 8001488:	f7ff fec7 	bl	800121a <NRF24_Get_TX_FIFO_Status>
 800148c:	4603      	mov	r3, r0
                if((NRF24_TXFIFO_STATUS_ERROR == NRF24_Get_TX_FIFO_Status()) ||\
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10e      	bne.n	80014b0 <NRF24_Handle_IRQ_Pin_Signal+0xa0>
                {
                    (void)NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE_RX);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fd1f 	bl	8000ed6 <NRF24_Set_RX_TX>
                    nrf24_ser_handler.mode          = NRF24_TRANSCIVER_MODE_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 800149a:	2201      	movs	r2, #1
 800149c:	715a      	strb	r2, [r3, #5]
                    nrf24_ser_handler.transmit_done = true;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	709a      	strb	r2, [r3, #2]
                    nrf24_ser_handler.rx_data_ready = false;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	70da      	strb	r2, [r3, #3]
                    nrf24_ser_handler.transmit_err  = false;
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	711a      	strb	r2, [r3, #4]
                }
            }
            break;
 80014b0:	bf00      	nop
    }
    return 0;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000100 	.word	0x20000100
 80014c0:	200000e4 	.word	0x200000e4

080014c4 <NRF24_Handle_Timer_IRQ>:
        + NULL
    Output Parameter:
        + NULL
*/
static uint8_t NRF24_Handle_Timer_IRQ(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    if(nrf24_ser_handler.mode == NRF24_TRANSCIVER_MODE_RX)
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <NRF24_Handle_Timer_IRQ+0x34>)
 80014ca:	795b      	ldrb	r3, [r3, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d10f      	bne.n	80014f0 <NRF24_Handle_Timer_IRQ+0x2c>
    {
        if((NRF24_TXFIFO_STATUS_ERROR != NRF24_Get_TX_FIFO_Status()) ||\
 80014d0:	f7ff fea3 	bl	800121a <NRF24_Get_TX_FIFO_Status>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d104      	bne.n	80014e4 <NRF24_Handle_Timer_IRQ+0x20>
            (NRF24_TXFIFO_STATUS_EMPTY != NRF24_Get_TX_FIFO_Status()))
 80014da:	f7ff fe9e 	bl	800121a <NRF24_Get_TX_FIFO_Status>
 80014de:	4603      	mov	r3, r0
        if((NRF24_TXFIFO_STATUS_ERROR != NRF24_Get_TX_FIFO_Status()) ||\
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d005      	beq.n	80014f0 <NRF24_Handle_Timer_IRQ+0x2c>
        {
            (void)NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE_TX);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff fcf6 	bl	8000ed6 <NRF24_Set_RX_TX>
            nrf24_ser_handler.mode = NRF24_TRANSCIVER_MODE_TX;
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <NRF24_Handle_Timer_IRQ+0x34>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	715a      	strb	r2, [r3, #5]
        }
    }
    return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200000e4 	.word	0x200000e4

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f90c 	bl	8001738 <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 f8d4 	bl	80016e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000008 	.word	0x20000008
 8001554:	20000018 	.word	0x20000018
 8001558:	20000014 	.word	0x20000014

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x1c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x20>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_IncTick+0x20>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000018 	.word	0x20000018
 800157c:	20000124 	.word	0x20000124

08001580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <HAL_GetTick+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	20000124 	.word	0x20000124

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <__NVIC_EnableIRQ+0x34>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f6:	f7ff ff4d 	bl	8001594 <__NVIC_GetPriorityGrouping>
 80016fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	6978      	ldr	r0, [r7, #20]
 8001702:	f7ff ff9b 	bl	800163c <NVIC_EncodePriority>
 8001706:	4602      	mov	r2, r0
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff6a 	bl	80015e8 <__NVIC_SetPriority>
}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff40 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffad 	bl	80016a0 <SysTick_Config>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b08b      	sub	sp, #44	; 0x2c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	e169      	b.n	8001a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001764:	2201      	movs	r2, #1
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8158 	bne.w	8001a32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4a9a      	ldr	r2, [pc, #616]	; (80019f0 <HAL_GPIO_Init+0x2a0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d05e      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 800178c:	4a98      	ldr	r2, [pc, #608]	; (80019f0 <HAL_GPIO_Init+0x2a0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d875      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 8001792:	4a98      	ldr	r2, [pc, #608]	; (80019f4 <HAL_GPIO_Init+0x2a4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d058      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 8001798:	4a96      	ldr	r2, [pc, #600]	; (80019f4 <HAL_GPIO_Init+0x2a4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d86f      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 800179e:	4a96      	ldr	r2, [pc, #600]	; (80019f8 <HAL_GPIO_Init+0x2a8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d052      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017a4:	4a94      	ldr	r2, [pc, #592]	; (80019f8 <HAL_GPIO_Init+0x2a8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d869      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017aa:	4a94      	ldr	r2, [pc, #592]	; (80019fc <HAL_GPIO_Init+0x2ac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d04c      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017b0:	4a92      	ldr	r2, [pc, #584]	; (80019fc <HAL_GPIO_Init+0x2ac>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d863      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017b6:	4a92      	ldr	r2, [pc, #584]	; (8001a00 <HAL_GPIO_Init+0x2b0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d046      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017bc:	4a90      	ldr	r2, [pc, #576]	; (8001a00 <HAL_GPIO_Init+0x2b0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d85d      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d82a      	bhi.n	800181c <HAL_GPIO_Init+0xcc>
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d859      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <HAL_GPIO_Init+0x80>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	0800184b 	.word	0x0800184b
 80017d4:	08001825 	.word	0x08001825
 80017d8:	08001837 	.word	0x08001837
 80017dc:	08001879 	.word	0x08001879
 80017e0:	0800187f 	.word	0x0800187f
 80017e4:	0800187f 	.word	0x0800187f
 80017e8:	0800187f 	.word	0x0800187f
 80017ec:	0800187f 	.word	0x0800187f
 80017f0:	0800187f 	.word	0x0800187f
 80017f4:	0800187f 	.word	0x0800187f
 80017f8:	0800187f 	.word	0x0800187f
 80017fc:	0800187f 	.word	0x0800187f
 8001800:	0800187f 	.word	0x0800187f
 8001804:	0800187f 	.word	0x0800187f
 8001808:	0800187f 	.word	0x0800187f
 800180c:	0800187f 	.word	0x0800187f
 8001810:	0800187f 	.word	0x0800187f
 8001814:	0800182d 	.word	0x0800182d
 8001818:	08001841 	.word	0x08001841
 800181c:	4a79      	ldr	r2, [pc, #484]	; (8001a04 <HAL_GPIO_Init+0x2b4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001822:	e02c      	b.n	800187e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	623b      	str	r3, [r7, #32]
          break;
 800182a:	e029      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	3304      	adds	r3, #4
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e024      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	3308      	adds	r3, #8
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e01f      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	330c      	adds	r3, #12
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e01a      	b.n	8001880 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001852:	2304      	movs	r3, #4
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e013      	b.n	8001880 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001860:	2308      	movs	r3, #8
 8001862:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	611a      	str	r2, [r3, #16]
          break;
 800186a:	e009      	b.n	8001880 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	615a      	str	r2, [r3, #20]
          break;
 8001876:	e003      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x130>
          break;
 800187e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d801      	bhi.n	800188a <HAL_GPIO_Init+0x13a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	e001      	b.n	800188e <HAL_GPIO_Init+0x13e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d802      	bhi.n	800189c <HAL_GPIO_Init+0x14c>
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x152>
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3b08      	subs	r3, #8
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	210f      	movs	r1, #15
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	6a39      	ldr	r1, [r7, #32]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80b1 	beq.w	8001a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d0:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a4c      	ldr	r2, [pc, #304]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018e8:	4a48      	ldr	r2, [pc, #288]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <HAL_GPIO_Init+0x2c0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_GPIO_Init+0x1ec>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3f      	ldr	r2, [pc, #252]	; (8001a14 <HAL_GPIO_Init+0x2c4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00d      	beq.n	8001938 <HAL_GPIO_Init+0x1e8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <HAL_GPIO_Init+0x2c8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_Init+0x1e4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3d      	ldr	r2, [pc, #244]	; (8001a1c <HAL_GPIO_Init+0x2cc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_GPIO_Init+0x1e0>
 800192c:	2303      	movs	r3, #3
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001930:	2304      	movs	r3, #4
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001934:	2302      	movs	r3, #2
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 800193c:	2300      	movs	r3, #0
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194e:	492f      	ldr	r1, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	492c      	ldr	r1, [pc, #176]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4928      	ldr	r1, [pc, #160]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001980:	4013      	ands	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4922      	ldr	r1, [pc, #136]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	491e      	ldr	r1, [pc, #120]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4918      	ldr	r1, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4914      	ldr	r1, [pc, #80]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d021      	beq.n	8001a24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e021      	b.n	8001a32 <HAL_GPIO_Init+0x2e2>
 80019ee:	bf00      	nop
 80019f0:	10320000 	.word	0x10320000
 80019f4:	10310000 	.word	0x10310000
 80019f8:	10220000 	.word	0x10220000
 80019fc:	10210000 	.word	0x10210000
 8001a00:	10120000 	.word	0x10120000
 8001a04:	10110000 	.word	0x10110000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40010800 	.word	0x40010800
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	40011000 	.word	0x40011000
 8001a1c:	40011400 	.word	0x40011400
 8001a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4909      	ldr	r1, [pc, #36]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f47f ae8e 	bne.w	8001764 <HAL_GPIO_Init+0x14>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	372c      	adds	r7, #44	; 0x2c
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f824 	bl	8000af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e26c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8087 	beq.w	8001be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad8:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d00c      	beq.n	8001afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae4:	4b8f      	ldr	r3, [pc, #572]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d112      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5e>
 8001af0:	4b8c      	ldr	r3, [pc, #560]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d10b      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afe:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d06c      	beq.n	8001be4 <HAL_RCC_OscConfig+0x12c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d168      	bne.n	8001be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e246      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x76>
 8001b20:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a7f      	ldr	r2, [pc, #508]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e02e      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x98>
 8001b36:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7a      	ldr	r2, [pc, #488]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b78      	ldr	r3, [pc, #480]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a77      	ldr	r2, [pc, #476]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0xbc>
 8001b5a:	4b72      	ldr	r3, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a71      	ldr	r2, [pc, #452]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b74:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6a      	ldr	r2, [pc, #424]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a67      	ldr	r2, [pc, #412]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fcf4 	bl	8001580 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fcf0 	bl	8001580 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1fa      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xe4>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fce0 	bl	8001580 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcdc 	bl	8001580 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1e6      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x10c>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d063      	beq.n	8001cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bfe:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x18c>
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x176>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e1ba      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4939      	ldr	r1, [pc, #228]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fc95 	bl	8001580 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fc91 	bl	8001580 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e19b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4927      	ldr	r1, [pc, #156]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fc74 	bl	8001580 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fc70 	bl	8001580 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e17a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03a      	beq.n	8001d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d019      	beq.n	8001d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fc54 	bl	8001580 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fc50 	bl	8001580 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e15a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f000 faa6 	bl	800224c <RCC_Delay>
 8001d00:	e01c      	b.n	8001d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7ff fc3a 	bl	8001580 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0e:	e00f      	b.n	8001d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc36 	bl	8001580 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d908      	bls.n	8001d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e140      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	42420000 	.word	0x42420000
 8001d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b9e      	ldr	r3, [pc, #632]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e9      	bne.n	8001d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a6 	beq.w	8001e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b97      	ldr	r3, [pc, #604]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10d      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b94      	ldr	r3, [pc, #592]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a93      	ldr	r2, [pc, #588]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b91      	ldr	r3, [pc, #580]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b8e      	ldr	r3, [pc, #568]	; (8001fb0 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <HAL_RCC_OscConfig+0x4f8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a8a      	ldr	r2, [pc, #552]	; (8001fb0 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fbf7 	bl	8001580 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7ff fbf3 	bl	8001580 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b64      	cmp	r3, #100	; 0x64
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e0fd      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <HAL_RCC_OscConfig+0x4f8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x312>
 8001dbc:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a7a      	ldr	r2, [pc, #488]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	e02d      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x334>
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a75      	ldr	r2, [pc, #468]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b73      	ldr	r3, [pc, #460]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a72      	ldr	r2, [pc, #456]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	e01c      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x356>
 8001df4:	4b6d      	ldr	r3, [pc, #436]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a6c      	ldr	r2, [pc, #432]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a69      	ldr	r2, [pc, #420]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	e00b      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a66      	ldr	r2, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	4b64      	ldr	r3, [pc, #400]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fba7 	bl	8001580 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff fba3 	bl	8001580 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0ab      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ee      	beq.n	8001e36 <HAL_RCC_OscConfig+0x37e>
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fb91 	bl	8001580 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff fb8d 	bl	8001580 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e095      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1ee      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b48      	ldr	r3, [pc, #288]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a47      	ldr	r2, [pc, #284]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8081 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d061      	beq.n	8001f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d146      	bne.n	8001f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_RCC_OscConfig+0x4fc>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff fb61 	bl	8001580 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff fb5d 	bl	8001580 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e067      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed4:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	492d      	ldr	r1, [pc, #180]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a19      	ldr	r1, [r3, #32]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	4927      	ldr	r1, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x4fc>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fb31 	bl	8001580 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff fb2d 	bl	8001580 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e037      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46a>
 8001f40:	e02f      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_RCC_OscConfig+0x4fc>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fb1a 	bl	8001580 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff fb16 	bl	8001580 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e020      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x498>
 8001f6e:	e018      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e013      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42420060 	.word	0x42420060

08001fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0d0      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4965      	ldr	r1, [pc, #404]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202c:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	494d      	ldr	r1, [pc, #308]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d040      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d115      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07f      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e073      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e06b      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4936      	ldr	r1, [pc, #216]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff fa6a 	bl	8001580 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7ff fa66 	bl	8001580 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e053      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d210      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4922      	ldr	r1, [pc, #136]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e032      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4916      	ldr	r1, [pc, #88]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	490e      	ldr	r1, [pc, #56]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002146:	f000 f821 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214a:	4602      	mov	r2, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	490a      	ldr	r1, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1cc>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f9c8 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	08003294 	.word	0x08003294
 8002184:	20000008 	.word	0x20000008
 8002188:	20000014 	.word	0x20000014

0800218c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b490      	push	{r4, r7}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002194:	1d3c      	adds	r4, r7, #4
 8002196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800219c:	f240 2301 	movw	r3, #513	; 0x201
 80021a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d002      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x40>
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x46>
 80021ca:	e02d      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ce:	623b      	str	r3, [r7, #32]
      break;
 80021d0:	e02d      	b.n	800222e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	0c9b      	lsrs	r3, r3, #18
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021de:	4413      	add	r3, r2
 80021e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	0c5b      	lsrs	r3, r3, #17
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021fe:	4413      	add	r3, r2
 8002200:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002204:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220a:	fb02 f203 	mul.w	r2, r2, r3
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	e004      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <HAL_RCC_GetSysClockFreq+0xbc>)
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	623b      	str	r3, [r7, #32]
      break;
 8002226:	e002      	b.n	800222e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800222a:	623b      	str	r3, [r7, #32]
      break;
 800222c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222e:	6a3b      	ldr	r3, [r7, #32]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3728      	adds	r7, #40	; 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bc90      	pop	{r4, r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	08003284 	.word	0x08003284
 8002240:	40021000 	.word	0x40021000
 8002244:	007a1200 	.word	0x007a1200
 8002248:	003d0900 	.word	0x003d0900

0800224c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <RCC_Delay+0x34>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <RCC_Delay+0x38>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0a5b      	lsrs	r3, r3, #9
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002268:	bf00      	nop
  }
  while (Delay --);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	60fa      	str	r2, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f9      	bne.n	8002268 <RCC_Delay+0x1c>
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000008 	.word	0x20000008
 8002284:	10624dd3 	.word	0x10624dd3

08002288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e076      	b.n	8002388 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022aa:	d009      	beq.n	80022c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
 80022b2:	e005      	b.n	80022c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe f82e 	bl	800033c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002344:	ea42 0103 	orr.w	r1, r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	0c1a      	lsrs	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f002 0204 	and.w	r2, r2, #4
 8002366:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_SPI_Transmit+0x22>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e126      	b.n	8002600 <HAL_SPI_Transmit+0x270>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ba:	f7ff f8e1 	bl	8001580 <HAL_GetTick>
 80023be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d002      	beq.n	80023d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023d4:	e10b      	b.n	80025ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_SPI_Transmit+0x52>
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023e6:	e102      	b.n	80025ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2203      	movs	r2, #3
 80023ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	88fa      	ldrh	r2, [r7, #6]
 8002400:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242e:	d10f      	bne.n	8002450 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800243e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800244e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d007      	beq.n	800246e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002476:	d14b      	bne.n	8002510 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_SPI_Transmit+0xf6>
 8002480:	8afb      	ldrh	r3, [r7, #22]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d13e      	bne.n	8002504 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	881a      	ldrh	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	1c9a      	adds	r2, r3, #2
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024aa:	e02b      	b.n	8002504 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d112      	bne.n	80024e0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	881a      	ldrh	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	1c9a      	adds	r2, r3, #2
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80024de:	e011      	b.n	8002504 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e0:	f7ff f84e 	bl	8001580 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d803      	bhi.n	80024f8 <HAL_SPI_Transmit+0x168>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d102      	bne.n	80024fe <HAL_SPI_Transmit+0x16e>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002502:	e074      	b.n	80025ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ce      	bne.n	80024ac <HAL_SPI_Transmit+0x11c>
 800250e:	e04c      	b.n	80025aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_SPI_Transmit+0x18e>
 8002518:	8afb      	ldrh	r3, [r7, #22]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d140      	bne.n	80025a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002544:	e02c      	b.n	80025a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b02      	cmp	r3, #2
 8002552:	d113      	bne.n	800257c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	86da      	strh	r2, [r3, #54]	; 0x36
 800257a:	e011      	b.n	80025a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800257c:	f7ff f800 	bl	8001580 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d803      	bhi.n	8002594 <HAL_SPI_Transmit+0x204>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d102      	bne.n	800259a <HAL_SPI_Transmit+0x20a>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800259e:	e026      	b.n	80025ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1cd      	bne.n	8002546 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fa54 	bl	8002a5c <SPI_EndRxTxTransaction>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	77fb      	strb	r3, [r7, #31]
 80025ea:	e000      	b.n	80025ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80025ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002616:	2301      	movs	r3, #1
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_SPI_TransmitReceive+0x26>
 800262a:	2302      	movs	r3, #2
 800262c:	e18a      	b.n	8002944 <HAL_SPI_TransmitReceive+0x33c>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002636:	f7fe ffa3 	bl	8001580 <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002654:	2b01      	cmp	r3, #1
 8002656:	d00f      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x70>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800265e:	d107      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d103      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x68>
 8002668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800266c:	2b04      	cmp	r3, #4
 800266e:	d003      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002676:	e15b      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_SPI_TransmitReceive+0x82>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_TransmitReceive+0x82>
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002690:	e14e      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b04      	cmp	r3, #4
 800269c:	d003      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2205      	movs	r2, #5
 80026a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d007      	beq.n	80026fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002702:	d178      	bne.n	80027f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x10a>
 800270c:	8b7b      	ldrh	r3, [r7, #26]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d166      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	881a      	ldrh	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	1c9a      	adds	r2, r3, #2
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002736:	e053      	b.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d11b      	bne.n	800277e <HAL_SPI_TransmitReceive+0x176>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_SPI_TransmitReceive+0x176>
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d113      	bne.n	800277e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	1c9a      	adds	r2, r3, #2
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d119      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x1b8>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d014      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	b292      	uxth	r2, r2
 80027a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	1c9a      	adds	r2, r3, #2
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027bc:	2301      	movs	r3, #1
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027c0:	f7fe fede 	bl	8001580 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d807      	bhi.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d003      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027de:	e0a7      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1a6      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x130>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1a1      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x130>
 80027f4:	e07c      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x1fc>
 80027fe:	8b7b      	ldrh	r3, [r7, #26]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d16b      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	7812      	ldrb	r2, [r2, #0]
 8002810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282a:	e057      	b.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11c      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d017      	beq.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d114      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d119      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x2ae>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d014      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028b2:	2301      	movs	r3, #1
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028b6:	f7fe fe63 	bl	8001580 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d803      	bhi.n	80028ce <HAL_SPI_TransmitReceive+0x2c6>
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d102      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x2cc>
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028da:	e029      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1a2      	bne.n	800282c <HAL_SPI_TransmitReceive+0x224>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d19d      	bne.n	800282c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f8b1 	bl	8002a5c <SPI_EndRxTxTransaction>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800290c:	e010      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	e000      	b.n	8002930 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800292e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002940:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002944:	4618      	mov	r0, r3
 8002946:	3730      	adds	r7, #48	; 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800295c:	f7fe fe10 	bl	8001580 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	4413      	add	r3, r2
 800296a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800296c:	f7fe fe08 	bl	8001580 <HAL_GetTick>
 8002970:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	0d1b      	lsrs	r3, r3, #20
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002982:	e054      	b.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d050      	beq.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800298c:	f7fe fdf8 	bl	8001580 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	429a      	cmp	r2, r3
 800299a:	d902      	bls.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d13d      	bne.n	8002a1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ba:	d111      	bne.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c4:	d004      	beq.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	d107      	bne.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e8:	d10f      	bne.n	8002a0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e017      	b.n	8002a4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4013      	ands	r3, r2
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d19b      	bne.n	8002984 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000008 	.word	0x20000008

08002a5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ff6a 	bl	800294c <SPI_WaitFlagStateUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e000      	b.n	8002a90 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e041      	b.n	8002b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd fc86 	bl	80003d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fa1e 	bl	8002f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d122      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d11b      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f06f 0202 	mvn.w	r2, #2
 8002b62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f9b1 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002b7e:	e005      	b.n	8002b8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f9a4 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9b3 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d122      	bne.n	8002be6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d11b      	bne.n	8002be6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0204 	mvn.w	r2, #4
 8002bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f987 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002bd2:	e005      	b.n	8002be0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f97a 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f989 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d122      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11b      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f06f 0208 	mvn.w	r2, #8
 8002c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f95d 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002c26:	e005      	b.n	8002c34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f950 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f95f 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d122      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d11b      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0210 	mvn.w	r2, #16
 8002c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2208      	movs	r2, #8
 8002c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f933 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002c7a:	e005      	b.n	8002c88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f926 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f935 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10e      	bne.n	8002cba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0201 	mvn.w	r2, #1
 8002cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fd ff13 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b80      	cmp	r3, #128	; 0x80
 8002cd4:	d107      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fa78 	bl	80031d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d10e      	bne.n	8002d12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d107      	bne.n	8002d12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f8f9 	bl	8002f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d10e      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d107      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f06f 0220 	mvn.w	r2, #32
 8002d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fa43 	bl	80031c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_ConfigClockSource+0x18>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0b3      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x180>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d84:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d96:	d03e      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0xd0>
 8002d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9c:	f200 8087 	bhi.w	8002eae <HAL_TIM_ConfigClockSource+0x168>
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	f000 8085 	beq.w	8002eb2 <HAL_TIM_ConfigClockSource+0x16c>
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d87f      	bhi.n	8002eae <HAL_TIM_ConfigClockSource+0x168>
 8002dae:	2b70      	cmp	r3, #112	; 0x70
 8002db0:	d01a      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0xa2>
 8002db2:	2b70      	cmp	r3, #112	; 0x70
 8002db4:	d87b      	bhi.n	8002eae <HAL_TIM_ConfigClockSource+0x168>
 8002db6:	2b60      	cmp	r3, #96	; 0x60
 8002db8:	d050      	beq.n	8002e5c <HAL_TIM_ConfigClockSource+0x116>
 8002dba:	2b60      	cmp	r3, #96	; 0x60
 8002dbc:	d877      	bhi.n	8002eae <HAL_TIM_ConfigClockSource+0x168>
 8002dbe:	2b50      	cmp	r3, #80	; 0x50
 8002dc0:	d03c      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0xf6>
 8002dc2:	2b50      	cmp	r3, #80	; 0x50
 8002dc4:	d873      	bhi.n	8002eae <HAL_TIM_ConfigClockSource+0x168>
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d058      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0x136>
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d86f      	bhi.n	8002eae <HAL_TIM_ConfigClockSource+0x168>
 8002dce:	2b30      	cmp	r3, #48	; 0x30
 8002dd0:	d064      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0x156>
 8002dd2:	2b30      	cmp	r3, #48	; 0x30
 8002dd4:	d86b      	bhi.n	8002eae <HAL_TIM_ConfigClockSource+0x168>
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d060      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0x156>
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d867      	bhi.n	8002eae <HAL_TIM_ConfigClockSource+0x168>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d05c      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0x156>
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d05a      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002de6:	e062      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f000 f967 	bl	80030ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	609a      	str	r2, [r3, #8]
      break;
 8002e14:	e04e      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6899      	ldr	r1, [r3, #8]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f000 f950 	bl	80030ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e38:	609a      	str	r2, [r3, #8]
      break;
 8002e3a:	e03b      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f000 f8c7 	bl	8002fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2150      	movs	r1, #80	; 0x50
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f91e 	bl	8003096 <TIM_ITRx_SetConfig>
      break;
 8002e5a:	e02b      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f000 f8e5 	bl	8003038 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2160      	movs	r1, #96	; 0x60
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f90e 	bl	8003096 <TIM_ITRx_SetConfig>
      break;
 8002e7a:	e01b      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f000 f8a7 	bl	8002fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f8fe 	bl	8003096 <TIM_ITRx_SetConfig>
      break;
 8002e9a:	e00b      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f000 f8f5 	bl	8003096 <TIM_ITRx_SetConfig>
        break;
 8002eac:	e002      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
	...

08002f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <TIM_Base_SetConfig+0xb8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00b      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d007      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <TIM_Base_SetConfig+0xbc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <TIM_Base_SetConfig+0xc0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <TIM_Base_SetConfig+0xb8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d007      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <TIM_Base_SetConfig+0xbc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <TIM_Base_SetConfig+0xc0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <TIM_Base_SetConfig+0xb8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	615a      	str	r2, [r3, #20]
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800

08002fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f023 0201 	bic.w	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 030a 	bic.w	r3, r3, #10
 8003018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f023 0210 	bic.w	r2, r3, #16
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003062:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	031b      	lsls	r3, r3, #12
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003074:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f043 0307 	orr.w	r3, r3, #7
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	609a      	str	r2, [r3, #8]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b087      	sub	sp, #28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	021a      	lsls	r2, r3, #8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	609a      	str	r2, [r3, #8]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800311c:	2302      	movs	r3, #2
 800311e:	e046      	b.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d009      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10c      	bne.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4313      	orrs	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800

080031c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	2600      	movs	r6, #0
 80031ec:	4d0c      	ldr	r5, [pc, #48]	; (8003220 <__libc_init_array+0x38>)
 80031ee:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031f0:	1b64      	subs	r4, r4, r5
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	42a6      	cmp	r6, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	f000 f830 	bl	800325c <_init>
 80031fc:	2600      	movs	r6, #0
 80031fe:	4d0a      	ldr	r5, [pc, #40]	; (8003228 <__libc_init_array+0x40>)
 8003200:	4c0a      	ldr	r4, [pc, #40]	; (800322c <__libc_init_array+0x44>)
 8003202:	1b64      	subs	r4, r4, r5
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	42a6      	cmp	r6, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003210:	4798      	blx	r3
 8003212:	3601      	adds	r6, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f855 3b04 	ldr.w	r3, [r5], #4
 800321a:	4798      	blx	r3
 800321c:	3601      	adds	r6, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	080032a4 	.word	0x080032a4
 8003224:	080032a4 	.word	0x080032a4
 8003228:	080032a4 	.word	0x080032a4
 800322c:	080032a8 	.word	0x080032a8

08003230 <memcpy>:
 8003230:	440a      	add	r2, r1
 8003232:	4291      	cmp	r1, r2
 8003234:	f100 33ff 	add.w	r3, r0, #4294967295
 8003238:	d100      	bne.n	800323c <memcpy+0xc>
 800323a:	4770      	bx	lr
 800323c:	b510      	push	{r4, lr}
 800323e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003242:	4291      	cmp	r1, r2
 8003244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003248:	d1f9      	bne.n	800323e <memcpy+0xe>
 800324a:	bd10      	pop	{r4, pc}

0800324c <memset>:
 800324c:	4603      	mov	r3, r0
 800324e:	4402      	add	r2, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <_init>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr

08003268 <_fini>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr
