
nrf24_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003328  08003328  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003328  08003328  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003328  08003328  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000001c  0800334c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  0800334c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cda7  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfc  00000000  00000000  0002cdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0002eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017433  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cca4  00000000  00000000  000477c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a009  00000000  00000000  00054467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de470  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003504  00000000  00000000  000de4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080032e0 	.word	0x080032e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080032e0 	.word	0x080032e0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1*/
  if(NRF24_SERVICE_STATUS_OK != NRF24_Service_Init())
 8000150:	f000 fd0a 	bl	8000b68 <NRF24_Service_Init>
 8000154:	4603      	mov	r3, r0
 8000156:	2b00      	cmp	r3, #0
 8000158:	d002      	beq.n	8000160 <main+0x14>
  {
    return -1;
 800015a:	f04f 33ff 	mov.w	r3, #4294967295
 800015e:	e0ca      	b.n	80002f6 <main+0x1aa>
  }
  //Reset all Register
  if(NRF24_SERVICE_STATUS_OK != NRF24_SoftReset_Init())
 8000160:	f000 fd0e 	bl	8000b80 <NRF24_SoftReset_Init>
 8000164:	4603      	mov	r3, r0
 8000166:	2b00      	cmp	r3, #0
 8000168:	d002      	beq.n	8000170 <main+0x24>
  {
    return -1;
 800016a:	f04f 33ff 	mov.w	r3, #4294967295
 800016e:	e0c2      	b.n	80002f6 <main+0x1aa>
  }
  //Init nrf24 service handler;
  memset(&nrf24_ser_handler, 0, sizeof(NRF24_SERVICE_HANDLER));
 8000170:	221a      	movs	r2, #26
 8000172:	2100      	movs	r1, #0
 8000174:	4861      	ldr	r0, [pc, #388]	; (80002fc <main+0x1b0>)
 8000176:	f003 f8ab 	bl	80032d0 <memset>
  nrf24_ser_handler.mode             = NRF24_TRANSCIVER_MODE_RX;
 800017a:	4b60      	ldr	r3, [pc, #384]	; (80002fc <main+0x1b0>)
 800017c:	2201      	movs	r2, #1
 800017e:	715a      	strb	r2, [r3, #5]
  nrf24_ser_handler.have_rx_pkt      = false;
 8000180:	4b5e      	ldr	r3, [pc, #376]	; (80002fc <main+0x1b0>)
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]
  nrf24_ser_handler.tx_pkt_full      = false;
 8000186:	4b5d      	ldr	r3, [pc, #372]	; (80002fc <main+0x1b0>)
 8000188:	2200      	movs	r2, #0
 800018a:	705a      	strb	r2, [r3, #1]
  nrf24_ser_handler.transmit_done    = false;
 800018c:	4b5b      	ldr	r3, [pc, #364]	; (80002fc <main+0x1b0>)
 800018e:	2200      	movs	r2, #0
 8000190:	709a      	strb	r2, [r3, #2]
  nrf24_ser_handler.rx_data_ready    = false;
 8000192:	4b5a      	ldr	r3, [pc, #360]	; (80002fc <main+0x1b0>)
 8000194:	2200      	movs	r2, #0
 8000196:	70da      	strb	r2, [r3, #3]
  nrf24_ser_handler.transmit_err     = false;
 8000198:	4b58      	ldr	r3, [pc, #352]	; (80002fc <main+0x1b0>)
 800019a:	2200      	movs	r2, #0
 800019c:	711a      	strb	r2, [r3, #4]
  memcpy(nrf24_ser_handler.nrf24_dev_addr, node_addr, 5);
 800019e:	4b57      	ldr	r3, [pc, #348]	; (80002fc <main+0x1b0>)
 80001a0:	4a57      	ldr	r2, [pc, #348]	; (8000300 <main+0x1b4>)
 80001a2:	3306      	adds	r3, #6
 80001a4:	6810      	ldr	r0, [r2, #0]
 80001a6:	6018      	str	r0, [r3, #0]
 80001a8:	7912      	ldrb	r2, [r2, #4]
 80001aa:	711a      	strb	r2, [r3, #4]
  //Used Only one pipe for this example
  nrf24_ser_handler.pipe[0].is_en    = true;
 80001ac:	4b53      	ldr	r3, [pc, #332]	; (80002fc <main+0x1b0>)
 80001ae:	2201      	movs	r2, #1
 80001b0:	72da      	strb	r2, [r3, #11]
  nrf24_ser_handler.pipe[0].addr     = 0x02;
 80001b2:	4b52      	ldr	r3, [pc, #328]	; (80002fc <main+0x1b0>)
 80001b4:	2202      	movs	r2, #2
 80001b6:	731a      	strb	r2, [r3, #12]
  nrf24_ser_handler.pipe[0].pipe_idx = 1;
 80001b8:	4b50      	ldr	r3, [pc, #320]	; (80002fc <main+0x1b0>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	735a      	strb	r2, [r3, #13]
  /* USER CODE END 1 */
  //Set address witdh is 5 byte
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_Addr_Width(NRF24_SET_ADDR_WIDTH_5BYTE))
 80001be:	2003      	movs	r0, #3
 80001c0:	f000 ff86 	bl	80010d0 <NRF24_Set_Addr_Width>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d002      	beq.n	80001d0 <main+0x84>
  {
    return -1;
 80001ca:	f04f 33ff 	mov.w	r3, #4294967295
 80001ce:	e092      	b.n	80002f6 <main+0x1aa>
  }

  //Set 1 Byte CRC encoding
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_CRC_encoding(NRF24_CRC_ENCODE_1BYTE))
 80001d0:	2008      	movs	r0, #8
 80001d2:	f000 fef6 	bl	8000fc2 <NRF24_Set_CRC_encoding>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d002      	beq.n	80001e2 <main+0x96>
  {
    return -1;
 80001dc:	f04f 33ff 	mov.w	r3, #4294967295
 80001e0:	e089      	b.n	80002f6 <main+0x1aa>
  }

  //Set IRQ mask for node: MAX re-transmit, data send, rx data ready
  if(NRF24_SERVICE_STATUS_OK != NRF24_Config_IRQ_Mask(NRF24_CONFIG_IRQ_MASK_ALL, true))
 80001e2:	2101      	movs	r1, #1
 80001e4:	2070      	movs	r0, #112	; 0x70
 80001e6:	f000 ff36 	bl	8001056 <NRF24_Config_IRQ_Mask>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <main+0xaa>
  {
    return -1;
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	e07f      	b.n	80002f6 <main+0x1aa>
  }

  //Set Auto re-transmit delay
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_Auto_Retransmit_Delay(NRF24_RETRANSMIT_DELAY_1000US))
 80001f6:	2003      	movs	r0, #3
 80001f8:	f000 ff7f 	bl	80010fa <NRF24_Set_Auto_Retransmit_Delay>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d002      	beq.n	8000208 <main+0xbc>
  {
    return -1;
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	e076      	b.n	80002f6 <main+0x1aa>
  }

  //Set Max auto re-transmit count
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_Auto_Retransmit_Count(6))
 8000208:	2006      	movs	r0, #6
 800020a:	f000 ffa2 	bl	8001152 <NRF24_Set_Auto_Retransmit_Count>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d002      	beq.n	800021a <main+0xce>
  {
    return -1;
 8000214:	f04f 33ff 	mov.w	r3, #4294967295
 8000218:	e06d      	b.n	80002f6 <main+0x1aa>
  }

  //Set RF channel
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_RF_Channel(26))
 800021a:	201a      	movs	r0, #26
 800021c:	f000 ffc2 	bl	80011a4 <NRF24_Set_RF_Channel>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d002      	beq.n	800022c <main+0xe0>
  {
    return -1;
 8000226:	f04f 33ff 	mov.w	r3, #4294967295
 800022a:	e064      	b.n	80002f6 <main+0x1aa>
  }

  //Set Data rate
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_RF_Data_Rate(NRF24_DATA_RATE_1MBPS))
 800022c:	2000      	movs	r0, #0
 800022e:	f000 ffe2 	bl	80011f6 <NRF24_Set_RF_Data_Rate>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <main+0xf2>
  {
    return -1;
 8000238:	f04f 33ff 	mov.w	r3, #4294967295
 800023c:	e05b      	b.n	80002f6 <main+0x1aa>
  }

  //Set Power Transmition
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_RF_PWR(NRF24_OUTPUT_PWR_6DBM))
 800023e:	2004      	movs	r0, #4
 8000240:	f001 f802 	bl	8001248 <NRF24_Set_RF_PWR>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <main+0x104>
  {
    return -1;
 800024a:	f04f 33ff 	mov.w	r3, #4294967295
 800024e:	e052      	b.n	80002f6 <main+0x1aa>
  }

  //Set Enable PIPE 0
  if(NRF24_SERVICE_STATUS_OK != NRF24_En_Dis_PIPE(NRF24_ENABLE_RX_PIPE0, true))
 8000250:	2101      	movs	r1, #1
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fe42 	bl	8000edc <NRF24_En_Dis_PIPE>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d002      	beq.n	8000264 <main+0x118>
  {
    return -1;
 800025e:	f04f 33ff 	mov.w	r3, #4294967295
 8000262:	e048      	b.n	80002f6 <main+0x1aa>
  }

  //Set Enable PIPE 1
  if(NRF24_SERVICE_STATUS_OK != NRF24_En_Dis_PIPE(NRF24_ENABLE_RX_PIPE1, true))
 8000264:	2101      	movs	r1, #1
 8000266:	2002      	movs	r0, #2
 8000268:	f000 fe38 	bl	8000edc <NRF24_En_Dis_PIPE>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d002      	beq.n	8000278 <main+0x12c>
  {
    return -1;
 8000272:	f04f 33ff 	mov.w	r3, #4294967295
 8000276:	e03e      	b.n	80002f6 <main+0x1aa>
  }

  //Set Dynamic payload for pipe 0
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_DYNPLD_For_PIPE(0, NRF24_DYNAMIC_PLD_MODE_ON))
 8000278:	2104      	movs	r1, #4
 800027a:	2000      	movs	r0, #0
 800027c:	f001 f822 	bl	80012c4 <NRF24_Set_DYNPLD_For_PIPE>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d002      	beq.n	800028c <main+0x140>
  {
    return -1;
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	e034      	b.n	80002f6 <main+0x1aa>
  }

  //Set Dynamic payload for pipe 1
  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_DYNPLD_For_PIPE(1, NRF24_DYNAMIC_PLD_MODE_ON))
 800028c:	2104      	movs	r1, #4
 800028e:	2001      	movs	r0, #1
 8000290:	f001 f818 	bl	80012c4 <NRF24_Set_DYNPLD_For_PIPE>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d002      	beq.n	80002a0 <main+0x154>
  {
    return -1;
 800029a:	f04f 33ff 	mov.w	r3, #4294967295
 800029e:	e02a      	b.n	80002f6 <main+0x1aa>
  }

  //Set address for this node
  if(NRF24_SERVICE_STATUS_OK != NRF24_SetAddress(0, nrf24_ser_handler.nrf24_dev_addr, 5))
 80002a0:	2205      	movs	r2, #5
 80002a2:	4918      	ldr	r1, [pc, #96]	; (8000304 <main+0x1b8>)
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fdd1 	bl	8000e4c <NRF24_SetAddress>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <main+0x16a>
  {
    return -1;
 80002b0:	f04f 33ff 	mov.w	r3, #4294967295
 80002b4:	e01f      	b.n	80002f6 <main+0x1aa>
  }

  //Set address for pipe 1
  if(NRF24_SERVICE_STATUS_OK != NRF24_SetAddress(nrf24_ser_handler.pipe[0].pipe_idx, \
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <main+0x1b0>)
 80002b8:	7b5b      	ldrb	r3, [r3, #13]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4912      	ldr	r1, [pc, #72]	; (8000308 <main+0x1bc>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fdc4 	bl	8000e4c <NRF24_SetAddress>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d002      	beq.n	80002d0 <main+0x184>
                                                      &(nrf24_ser_handler.pipe[0].addr), 1))
  {
    return -1;
 80002ca:	f04f 33ff 	mov.w	r3, #4294967295
 80002ce:	e012      	b.n	80002f6 <main+0x1aa>
  }

  if(NRF24_SERVICE_STATUS_OK != NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE_RX))
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 fe40 	bl	8000f56 <NRF24_Set_RX_TX>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <main+0x196>
  {
    return -1;
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
 80002e0:	e009      	b.n	80002f6 <main+0x1aa>


  while (1)
  {
    /* USER CODE END WHILE */
    if(global_rx_pkt.pld_size != 0)
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <main+0x1c0>)
 80002e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d0fa      	beq.n	80002e2 <main+0x196>
    {
    	NRF24_Toggle_Debug_Pin();
 80002ec:	f000 fd90 	bl	8000e10 <NRF24_Toggle_Debug_Pin>
    	reset_nrf24_rx_internal_buf();
 80002f0:	f000 f80e 	bl	8000310 <reset_nrf24_rx_internal_buf>
    if(global_rx_pkt.pld_size != 0)
 80002f4:	e7f5      	b.n	80002e2 <main+0x196>
    }
  }
  /* USER CODE END 3 */
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	200000e0 	.word	0x200000e0
 8000300:	20000000 	.word	0x20000000
 8000304:	200000e6 	.word	0x200000e6
 8000308:	200000ec 	.word	0x200000ec
 800030c:	200000fc 	.word	0x200000fc

08000310 <reset_nrf24_rx_internal_buf>:

static void reset_nrf24_rx_internal_buf(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  memset(&global_rx_pkt, 0, sizeof(NRF24_RX_PLD));
 8000314:	2222      	movs	r2, #34	; 0x22
 8000316:	2100      	movs	r1, #0
 8000318:	4802      	ldr	r0, [pc, #8]	; (8000324 <reset_nrf24_rx_internal_buf+0x14>)
 800031a:	f002 ffd9 	bl	80032d0 <memset>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000fc 	.word	0x200000fc

08000328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <HAL_SPI_MspInit+0x88>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d12f      	bne.n	80003a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <HAL_SPI_MspInit+0x8c>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a19      	ldr	r2, [pc, #100]	; (80003b4 <HAL_SPI_MspInit+0x8c>)
 800034e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <HAL_SPI_MspInit+0x8c>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <HAL_SPI_MspInit+0x8c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a13      	ldr	r2, [pc, #76]	; (80003b4 <HAL_SPI_MspInit+0x8c>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <HAL_SPI_MspInit+0x8c>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000378:	23a0      	movs	r3, #160	; 0xa0
 800037a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800037c:	2302      	movs	r3, #2
 800037e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000380:	2303      	movs	r3, #3
 8000382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	4619      	mov	r1, r3
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <HAL_SPI_MspInit+0x90>)
 800038c:	f001 fa22 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000390:	2340      	movs	r3, #64	; 0x40
 8000392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <HAL_SPI_MspInit+0x90>)
 80003a4:	f001 fa16 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80003a8:	bf00      	nop
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40013000 	.word	0x40013000
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800

080003bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <HAL_TIM_Base_MspInit+0x44>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d113      	bne.n	80003f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <HAL_TIM_Base_MspInit+0x48>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <HAL_TIM_Base_MspInit+0x48>)
 80003d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <HAL_TIM_Base_MspInit+0x48>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	2018      	movs	r0, #24
 80003ec:	f001 f9bc 	bl	8001768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80003f0:	2018      	movs	r0, #24
 80003f2:	f001 f9d5 	bl	80017a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40012c00 	.word	0x40012c00
 8000404:	40021000 	.word	0x40021000

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800040c:	e7fe      	b.n	800040c <NMI_Handler+0x4>

0800040e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000412:	e7fe      	b.n	8000412 <HardFault_Handler+0x4>

08000414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <MemManage_Handler+0x4>

0800041a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800041e:	e7fe      	b.n	800041e <BusFault_Handler+0x4>

08000420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000424:	e7fe      	b.n	8000424 <UsageFault_Handler+0x4>

08000426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr

0800043e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044e:	f001 f8a3 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}

08000456 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800045a:	2008      	movs	r0, #8
 800045c:	f001 fb56 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000468:	4802      	ldr	r0, [pc, #8]	; (8000474 <TIM1_BRK_IRQHandler+0x10>)
 800046a:	f002 fba6 	bl	8002bba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000040 	.word	0x20000040

08000478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000484:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000486:	e003      	b.n	8000490 <LoopCopyDataInit>

08000488 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800048a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800048c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800048e:	3104      	adds	r1, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000490:	480a      	ldr	r0, [pc, #40]	; (80004bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000494:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000496:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000498:	d3f6      	bcc.n	8000488 <CopyDataInit>
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800049c:	e002      	b.n	80004a4 <LoopFillZerobss>

0800049e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004a0:	f842 3b04 	str.w	r3, [r2], #4

080004a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004a8:	d3f9      	bcc.n	800049e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004aa:	f7ff ffe5 	bl	8000478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ae:	f002 fedd 	bl	800326c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b2:	f7ff fe4b 	bl	800014c <main>
  bx lr
 80004b6:	4770      	bx	lr
  ldr r3, =_sidata
 80004b8:	08003330 	.word	0x08003330
  ldr r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004c0:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 80004c4:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 80004c8:	20000124 	.word	0x20000124

080004cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_2_IRQHandler>
	...

080004d0 <NRF24_HAL_Init>:

/*------------------------------------------------------------------
                           PUBLISH FUNCTION
  ------------------------------------------------------------------*/
NRF24_HAL_STATUS NRF24_HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    memset(&hal_handler, 0, sizeof(NRF24_HAL_HANDLER));
 80004d4:	2208      	movs	r2, #8
 80004d6:	2100      	movs	r1, #0
 80004d8:	4810      	ldr	r0, [pc, #64]	; (800051c <NRF24_HAL_Init+0x4c>)
 80004da:	f002 fef9 	bl	80032d0 <memset>

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_init_clock())
 80004de:	f000 f9d3 	bl	8000888 <NRF24_HAL_init_clock>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <NRF24_HAL_Init+0x1c>
    {
        return NRF24_HAL_STATUS_FAIL;
 80004e8:	2301      	movs	r3, #1
 80004ea:	e015      	b.n	8000518 <NRF24_HAL_Init+0x48>
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_init_spi())
 80004ec:	f000 fa12 	bl	8000914 <NRF24_HAL_init_spi>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <NRF24_HAL_Init+0x2a>
    {
        return NRF24_HAL_STATUS_FAIL;
 80004f6:	2301      	movs	r3, #1
 80004f8:	e00e      	b.n	8000518 <NRF24_HAL_Init+0x48>
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_init_timer())
 80004fa:	f000 faaf 	bl	8000a5c <NRF24_HAL_init_timer>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <NRF24_HAL_Init+0x38>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000504:	2301      	movs	r3, #1
 8000506:	e007      	b.n	8000518 <NRF24_HAL_Init+0x48>
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_init_gpio())
 8000508:	f000 fa3c 	bl	8000984 <NRF24_HAL_init_gpio>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <NRF24_HAL_Init+0x46>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000512:	2301      	movs	r3, #1
 8000514:	e000      	b.n	8000518 <NRF24_HAL_Init+0x48>
    }

    return NRF24_HAL_STATUS_OK;
 8000516:	2300      	movs	r3, #0
}
 8000518:	4618      	mov	r0, r3
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000038 	.word	0x20000038

08000520 <NRF24_HAL_Write>:
        + time_out: this is time out when SPI transmit.
    Output Parameter:
        + NULL
*/
NRF24_HAL_STATUS NRF24_HAL_Write(uint8_t reg_add, uint8_t *data, uint16_t data_size, uint16_t time_out)
{
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	60b9      	str	r1, [r7, #8]
 8000528:	4611      	mov	r1, r2
 800052a:	461a      	mov	r2, r3
 800052c:	4603      	mov	r3, r0
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	460b      	mov	r3, r1
 8000532:	81bb      	strh	r3, [r7, #12]
 8000534:	4613      	mov	r3, r2
 8000536:	80fb      	strh	r3, [r7, #6]
 8000538:	466b      	mov	r3, sp
 800053a:	461d      	mov	r5, r3
    uint8_t tx_data[data_size + 1];
 800053c:	89bb      	ldrh	r3, [r7, #12]
 800053e:	1c5c      	adds	r4, r3, #1
 8000540:	1e63      	subs	r3, r4, #1
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	4623      	mov	r3, r4
 8000546:	4618      	mov	r0, r3
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	f04f 0200 	mov.w	r2, #0
 8000550:	f04f 0300 	mov.w	r3, #0
 8000554:	00cb      	lsls	r3, r1, #3
 8000556:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800055a:	00c2      	lsls	r2, r0, #3
 800055c:	4623      	mov	r3, r4
 800055e:	4618      	mov	r0, r3
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	f04f 0200 	mov.w	r2, #0
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	00cb      	lsls	r3, r1, #3
 800056e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000572:	00c2      	lsls	r2, r0, #3
 8000574:	4623      	mov	r3, r4
 8000576:	3307      	adds	r3, #7
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	ebad 0d03 	sub.w	sp, sp, r3
 8000580:	466b      	mov	r3, sp
 8000582:	3300      	adds	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
    uint8_t idx;

    tx_data[0] = NRF24_HAL_WRITE_REG_CMD | reg_add;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	b2da      	uxtb	r2, r3
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	701a      	strb	r2, [r3, #0]

    for(idx = 0; idx < data_size; idx++)
 8000592:	2300      	movs	r3, #0
 8000594:	77fb      	strb	r3, [r7, #31]
 8000596:	e00a      	b.n	80005ae <NRF24_HAL_Write+0x8e>
    {
        tx_data[idx + 1] = data[idx];
 8000598:	7ffb      	ldrb	r3, [r7, #31]
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	441a      	add	r2, r3
 800059e:	7ffb      	ldrb	r3, [r7, #31]
 80005a0:	3301      	adds	r3, #1
 80005a2:	7811      	ldrb	r1, [r2, #0]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	54d1      	strb	r1, [r2, r3]
    for(idx = 0; idx < data_size; idx++)
 80005a8:	7ffb      	ldrb	r3, [r7, #31]
 80005aa:	3301      	adds	r3, #1
 80005ac:	77fb      	strb	r3, [r7, #31]
 80005ae:	7ffb      	ldrb	r3, [r7, #31]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	89ba      	ldrh	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8ef      	bhi.n	8000598 <NRF24_HAL_Write+0x78>
    }

    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_ENABLE);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 faa1 	bl	8000b00 <NRF24_HAL_control_spi>

    if(HAL_OK != HAL_SPI_Transmit(&hspi1, tx_data, data_size + 1, time_out))
 80005be:	6979      	ldr	r1, [r7, #20]
 80005c0:	89bb      	ldrh	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <NRF24_HAL_Write+0xcc>)
 80005ca:	f001 ff23 	bl	8002414 <HAL_SPI_Transmit>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <NRF24_HAL_Write+0xb8>
    {
        return NRF24_HAL_STATUS_FAIL;
 80005d4:	2301      	movs	r3, #1
 80005d6:	e003      	b.n	80005e0 <NRF24_HAL_Write+0xc0>
    }

    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_DISABLE);
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 fa91 	bl	8000b00 <NRF24_HAL_control_spi>

    return NRF24_HAL_STATUS_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	46ad      	mov	sp, r5
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3720      	adds	r7, #32
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bdb0      	pop	{r4, r5, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000088 	.word	0x20000088

080005f0 <NRF24_HAL_Read>:
        + time_out: this is time out when SPI transmit.
    Output Parameter:
        + data: this is out_put value of register
*/
NRF24_HAL_STATUS NRF24_HAL_Read(uint8_t reg_add, uint8_t *data, uint16_t data_size, uint16_t time_out)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b08c      	sub	sp, #48	; 0x30
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	4611      	mov	r1, r2
 80005fa:	461a      	mov	r2, r3
 80005fc:	4603      	mov	r3, r0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	460b      	mov	r3, r1
 8000602:	81bb      	strh	r3, [r7, #12]
 8000604:	4613      	mov	r3, r2
 8000606:	80fb      	strh	r3, [r7, #6]
 8000608:	466b      	mov	r3, sp
 800060a:	461d      	mov	r5, r3
    uint8_t tx_data[data_size + 1];
 800060c:	89bb      	ldrh	r3, [r7, #12]
 800060e:	1c5c      	adds	r4, r3, #1
 8000610:	1e63      	subs	r3, r4, #1
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
 8000614:	4623      	mov	r3, r4
 8000616:	4618      	mov	r0, r3
 8000618:	f04f 0100 	mov.w	r1, #0
 800061c:	f04f 0200 	mov.w	r2, #0
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	00cb      	lsls	r3, r1, #3
 8000626:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800062a:	00c2      	lsls	r2, r0, #3
 800062c:	4623      	mov	r3, r4
 800062e:	4618      	mov	r0, r3
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	f04f 0200 	mov.w	r2, #0
 8000638:	f04f 0300 	mov.w	r3, #0
 800063c:	00cb      	lsls	r3, r1, #3
 800063e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000642:	00c2      	lsls	r2, r0, #3
 8000644:	4623      	mov	r3, r4
 8000646:	3307      	adds	r3, #7
 8000648:	08db      	lsrs	r3, r3, #3
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	ebad 0d03 	sub.w	sp, sp, r3
 8000650:	ab02      	add	r3, sp, #8
 8000652:	3300      	adds	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    uint8_t rx_data[data_size + 1];
 8000656:	89bb      	ldrh	r3, [r7, #12]
 8000658:	1c5c      	adds	r4, r3, #1
 800065a:	1e63      	subs	r3, r4, #1
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	4623      	mov	r3, r4
 8000660:	4618      	mov	r0, r3
 8000662:	f04f 0100 	mov.w	r1, #0
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	00cb      	lsls	r3, r1, #3
 8000670:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000674:	00c2      	lsls	r2, r0, #3
 8000676:	4623      	mov	r3, r4
 8000678:	4618      	mov	r0, r3
 800067a:	f04f 0100 	mov.w	r1, #0
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	f04f 0300 	mov.w	r3, #0
 8000686:	00cb      	lsls	r3, r1, #3
 8000688:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800068c:	00c2      	lsls	r2, r0, #3
 800068e:	4623      	mov	r3, r4
 8000690:	3307      	adds	r3, #7
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	ebad 0d03 	sub.w	sp, sp, r3
 800069a:	ab02      	add	r3, sp, #8
 800069c:	3300      	adds	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
    uint8_t idx;

    tx_data[0] = NRF24_HAL_READ_REG_CMD | reg_add;
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	7bfa      	ldrb	r2, [r7, #15]
 80006a4:	701a      	strb	r2, [r3, #0]

    for(idx =0; idx < data_size; idx++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80006ac:	e00f      	b.n	80006ce <NRF24_HAL_Read+0xde>
    {
        tx_data[idx + 1] = NRF24_HAL_DUMMY_BYTE_SPI;
 80006ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006b2:	3301      	adds	r3, #1
 80006b4:	69fa      	ldr	r2, [r7, #28]
 80006b6:	21ff      	movs	r1, #255	; 0xff
 80006b8:	54d1      	strb	r1, [r2, r3]
        rx_data[idx] = 0x00;
 80006ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	2100      	movs	r1, #0
 80006c2:	54d1      	strb	r1, [r2, r3]
    for(idx =0; idx < data_size; idx++)
 80006c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006c8:	3301      	adds	r3, #1
 80006ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80006ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	89ba      	ldrh	r2, [r7, #12]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d8e9      	bhi.n	80006ae <NRF24_HAL_Read+0xbe>
    }

    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_ENABLE);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 fa10 	bl	8000b00 <NRF24_HAL_control_spi>
    if(HAL_OK != HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, data_size + 1, time_out))
 80006e0:	69f9      	ldr	r1, [r7, #28]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	89bb      	ldrh	r3, [r7, #12]
 80006e6:	3301      	adds	r3, #1
 80006e8:	b298      	uxth	r0, r3
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	4603      	mov	r3, r0
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <NRF24_HAL_Read+0x130>)
 80006f2:	f001 ffcb 	bl	800268c <HAL_SPI_TransmitReceive>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <NRF24_HAL_Read+0x110>
    {
        return NRF24_HAL_STATUS_FAIL;
 80006fc:	2301      	movs	r3, #1
 80006fe:	e00a      	b.n	8000716 <NRF24_HAL_Read+0x126>
    }
    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_DISABLE);
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f9fd 	bl	8000b00 <NRF24_HAL_control_spi>
    memcpy(data, rx_data + 1, data_size);
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3301      	adds	r3, #1
 800070a:	89ba      	ldrh	r2, [r7, #12]
 800070c:	4619      	mov	r1, r3
 800070e:	68b8      	ldr	r0, [r7, #8]
 8000710:	f002 fdd0 	bl	80032b4 <memcpy>
    return NRF24_HAL_STATUS_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	46ad      	mov	sp, r5
}
 8000718:	4618      	mov	r0, r3
 800071a:	3728      	adds	r7, #40	; 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bdb0      	pop	{r4, r5, r7, pc}
 8000720:	20000088 	.word	0x20000088

08000724 <NRF24_HAL_CMD>:
        + time_out: this is time out when SPI transmit.
    Output Parameter:
        + data: this is out_put value of register
*/
NRF24_HAL_STATUS NRF24_HAL_CMD(uint8_t cmd, uint8_t *data, uint16_t data_size, uint16_t time_out)
{
 8000724:	b5b0      	push	{r4, r5, r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af02      	add	r7, sp, #8
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	4611      	mov	r1, r2
 800072e:	461a      	mov	r2, r3
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	460b      	mov	r3, r1
 8000736:	81bb      	strh	r3, [r7, #12]
 8000738:	4613      	mov	r3, r2
 800073a:	80fb      	strh	r3, [r7, #6]
 800073c:	466b      	mov	r3, sp
 800073e:	461d      	mov	r5, r3
    uint8_t tx_data[data_size + 1];
 8000740:	89bb      	ldrh	r3, [r7, #12]
 8000742:	1c5c      	adds	r4, r3, #1
 8000744:	1e63      	subs	r3, r4, #1
 8000746:	623b      	str	r3, [r7, #32]
 8000748:	4623      	mov	r3, r4
 800074a:	4618      	mov	r0, r3
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	f04f 0200 	mov.w	r2, #0
 8000754:	f04f 0300 	mov.w	r3, #0
 8000758:	00cb      	lsls	r3, r1, #3
 800075a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800075e:	00c2      	lsls	r2, r0, #3
 8000760:	4623      	mov	r3, r4
 8000762:	4618      	mov	r0, r3
 8000764:	f04f 0100 	mov.w	r1, #0
 8000768:	f04f 0200 	mov.w	r2, #0
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	00cb      	lsls	r3, r1, #3
 8000772:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000776:	00c2      	lsls	r2, r0, #3
 8000778:	4623      	mov	r3, r4
 800077a:	3307      	adds	r3, #7
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	ebad 0d03 	sub.w	sp, sp, r3
 8000784:	ab02      	add	r3, sp, #8
 8000786:	3300      	adds	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
    uint8_t rx_data[data_size + 1];
 800078a:	89bb      	ldrh	r3, [r7, #12]
 800078c:	1c5c      	adds	r4, r3, #1
 800078e:	1e63      	subs	r3, r4, #1
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4623      	mov	r3, r4
 8000794:	4618      	mov	r0, r3
 8000796:	f04f 0100 	mov.w	r1, #0
 800079a:	f04f 0200 	mov.w	r2, #0
 800079e:	f04f 0300 	mov.w	r3, #0
 80007a2:	00cb      	lsls	r3, r1, #3
 80007a4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007a8:	00c2      	lsls	r2, r0, #3
 80007aa:	4623      	mov	r3, r4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f04f 0100 	mov.w	r1, #0
 80007b2:	f04f 0200 	mov.w	r2, #0
 80007b6:	f04f 0300 	mov.w	r3, #0
 80007ba:	00cb      	lsls	r3, r1, #3
 80007bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007c0:	00c2      	lsls	r2, r0, #3
 80007c2:	4623      	mov	r3, r4
 80007c4:	3307      	adds	r3, #7
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	ebad 0d03 	sub.w	sp, sp, r3
 80007ce:	ab02      	add	r3, sp, #8
 80007d0:	3300      	adds	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
    uint8_t idx;

    tx_data[0] =  cmd;
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	7bfa      	ldrb	r2, [r7, #15]
 80007d8:	701a      	strb	r2, [r3, #0]

    for(idx =0; idx < data_size; idx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007e0:	e00f      	b.n	8000802 <NRF24_HAL_CMD+0xde>
    {
        tx_data[idx + 1] = NRF24_HAL_DUMMY_BYTE_SPI;
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	3301      	adds	r3, #1
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	21ff      	movs	r1, #255	; 0xff
 80007ec:	54d1      	strb	r1, [r2, r3]
        rx_data[idx] = 0x00;
 80007ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	2100      	movs	r1, #0
 80007f6:	54d1      	strb	r1, [r2, r3]
    for(idx =0; idx < data_size; idx++)
 80007f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007fc:	3301      	adds	r3, #1
 80007fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000806:	b29b      	uxth	r3, r3
 8000808:	89ba      	ldrh	r2, [r7, #12]
 800080a:	429a      	cmp	r2, r3
 800080c:	d8e9      	bhi.n	80007e2 <NRF24_HAL_CMD+0xbe>
    }

    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_ENABLE);
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f976 	bl	8000b00 <NRF24_HAL_control_spi>
    if(HAL_OK != HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, data_size + 1, time_out))
 8000814:	69f9      	ldr	r1, [r7, #28]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	89bb      	ldrh	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	b298      	uxth	r0, r3
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	4603      	mov	r3, r0
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <NRF24_HAL_CMD+0x138>)
 8000826:	f001 ff31 	bl	800268c <HAL_SPI_TransmitReceive>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <NRF24_HAL_CMD+0x110>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000830:	2301      	movs	r3, #1
 8000832:	e00d      	b.n	8000850 <NRF24_HAL_CMD+0x12c>
    }
    NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS_DISABLE);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 f963 	bl	8000b00 <NRF24_HAL_control_spi>

    if(data != NULL)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <NRF24_HAL_CMD+0x12a>
    {
        memcpy(data, rx_data + 1, data_size);
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	3301      	adds	r3, #1
 8000844:	89ba      	ldrh	r2, [r7, #12]
 8000846:	4619      	mov	r1, r3
 8000848:	68b8      	ldr	r0, [r7, #8]
 800084a:	f002 fd33 	bl	80032b4 <memcpy>
    }
    return NRF24_HAL_STATUS_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	46ad      	mov	sp, r5
}
 8000852:	4618      	mov	r0, r3
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bdb0      	pop	{r4, r5, r7, pc}
 800085a:	bf00      	nop
 800085c:	20000088 	.word	0x20000088

08000860 <NRF24_HAL_Control_DEBUG>:
    HAL_GPIO_WritePin(NRF24_HAL_CE_PORT, NRF24_HAL_CE_PIN, status);
}


NRF24_HAL_STATUS    NRF24_HAL_Control_DEBUG (NRF24_HAL_DEBUG_STATUS status)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NRF24_HAL_DEBUG_PORT, NRF24_HAL_DEBUG_PIN, status);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	461a      	mov	r2, r3
 800086e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <NRF24_HAL_Control_DEBUG+0x24>)
 8000874:	f001 f932 	bl	8001adc <HAL_GPIO_WritePin>
}
 8000878:	bf00      	nop
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40011000 	.word	0x40011000

08000888 <NRF24_HAL_init_clock>:

/*------------------------------------------------------------------
                           STATIC FUNCTION
  ------------------------------------------------------------------*/
NRF24_HAL_STATUS NRF24_HAL_init_clock(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b090      	sub	sp, #64	; 0x40
 800088c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	2228      	movs	r2, #40	; 0x28
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fd1a 	bl	80032d0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 f933 	bl	8001b3c <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <NRF24_HAL_init_clock+0x58>
    {
        return NRF24_HAL_STATUS_FAIL;
 80008dc:	2301      	movs	r3, #1
 80008de:	e015      	b.n	800090c <NRF24_HAL_init_clock+0x84>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2302      	movs	r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2102      	movs	r1, #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fb9e 	bl	800203c <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <NRF24_HAL_init_clock+0x82>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <NRF24_HAL_init_clock+0x84>
    }
    return NRF24_HAL_STATUS_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3740      	adds	r7, #64	; 0x40
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <NRF24_HAL_init_spi>:
    + Full Duplex
    + Data size is 8 bit
    + Max Baudrate: 4Mhz 
*/
NRF24_HAL_STATUS NRF24_HAL_init_spi(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <NRF24_HAL_init_spi+0x68>)
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <NRF24_HAL_init_spi+0x6c>)
 800091c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <NRF24_HAL_init_spi+0x68>)
 8000920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000924:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <NRF24_HAL_init_spi+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <NRF24_HAL_init_spi+0x68>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <NRF24_HAL_init_spi+0x68>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <NRF24_HAL_init_spi+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <NRF24_HAL_init_spi+0x68>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <NRF24_HAL_init_spi+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <NRF24_HAL_init_spi+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <NRF24_HAL_init_spi+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <NRF24_HAL_init_spi+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <NRF24_HAL_init_spi+0x68>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <NRF24_HAL_init_spi+0x68>)
 8000966:	f001 fcd1 	bl	800230c <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <NRF24_HAL_init_spi+0x60>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <NRF24_HAL_init_spi+0x62>
    }
    return NRF24_HAL_STATUS_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000088 	.word	0x20000088
 8000980:	40013000 	.word	0x40013000

08000984 <NRF24_HAL_init_gpio>:

NRF24_HAL_STATUS NRF24_HAL_init_gpio(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <NRF24_HAL_init_gpio+0xc8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <NRF24_HAL_init_gpio+0xc8>)
 800099e:	f043 0320 	orr.w	r3, r3, #32
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <NRF24_HAL_init_gpio+0xc8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0320 	and.w	r3, r3, #32
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <NRF24_HAL_init_gpio+0xc8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a25      	ldr	r2, [pc, #148]	; (8000a4c <NRF24_HAL_init_gpio+0xc8>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <NRF24_HAL_init_gpio+0xc8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2114      	movs	r1, #20
 80009cc:	4820      	ldr	r0, [pc, #128]	; (8000a50 <NRF24_HAL_init_gpio+0xcc>)
 80009ce:	f001 f885 	bl	8001adc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d8:	481e      	ldr	r0, [pc, #120]	; (8000a54 <NRF24_HAL_init_gpio+0xd0>)
 80009da:	f001 f87f 	bl	8001adc <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PA2 PA4 */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80009de:	2314      	movs	r3, #20
 80009e0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4619      	mov	r1, r3
 80009f4:	4816      	ldr	r0, [pc, #88]	; (8000a50 <NRF24_HAL_init_gpio+0xcc>)
 80009f6:	f000 feed 	bl	80017d4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	4619      	mov	r1, r3
 8000a12:	4810      	ldr	r0, [pc, #64]	; (8000a54 <NRF24_HAL_init_gpio+0xd0>)
 8000a14:	f000 fede 	bl	80017d4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA3 */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <NRF24_HAL_init_gpio+0xd4>)
 8000a1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4809      	ldr	r0, [pc, #36]	; (8000a50 <NRF24_HAL_init_gpio+0xcc>)
 8000a2c:	f000 fed2 	bl	80017d4 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2009      	movs	r0, #9
 8000a36:	f000 fe97 	bl	8001768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a3a:	2009      	movs	r0, #9
 8000a3c:	f000 feb0 	bl	80017a0 <HAL_NVIC_EnableIRQ>
    return NRF24_HAL_STATUS_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40011000 	.word	0x40011000
 8000a58:	10110000 	.word	0x10110000

08000a5c <NRF24_HAL_init_timer>:
/*
    This function will config TIMER 1 like
    + Over counter at 1.5 s
*/
NRF24_HAL_STATUS NRF24_HAL_init_timer(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000a7a:	4a20      	ldr	r2, [pc, #128]	; (8000afc <NRF24_HAL_init_timer+0xa0>)
 8000a7c:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = NRF24_HAL_TIME_PRESCALER;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000a80:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000a84:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = NRF24_HAL_TIME_COUNT;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000a8e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000a92:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000aa8:	f002 f838 	bl	8002b1c <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <NRF24_HAL_init_timer+0x5a>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e01c      	b.n	8000af0 <NRF24_HAL_init_timer+0x94>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000ac4:	f002 f981 	bl	8002dca <HAL_TIM_ConfigClockSource>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <NRF24_HAL_init_timer+0x76>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <NRF24_HAL_init_timer+0x94>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <NRF24_HAL_init_timer+0x9c>)
 8000ae0:	f002 fb54 	bl	800318c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <NRF24_HAL_init_timer+0x92>
    {
        return NRF24_HAL_STATUS_FAIL;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <NRF24_HAL_init_timer+0x94>
    }
    return NRF24_HAL_STATUS_OK;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000040 	.word	0x20000040
 8000afc:	40012c00 	.word	0x40012c00

08000b00 <NRF24_HAL_control_spi>:

void NRF24_HAL_control_spi(NRF24_HAL_SPI_STATUS ctrl_status)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NRF24_HAL_CS_PORT, NRF24_HAL_CS_PIN, ctrl_status);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <NRF24_HAL_control_spi+0x20>)
 8000b12:	f000 ffe3 	bl	8001adc <HAL_GPIO_WritePin>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010800 	.word	0x40010800

08000b24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
        {
            hal_handler.callback_timer();
        }
#endif
    }
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
	...

08000b38 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == NRF24_HAL_IRQ_PIN)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d108      	bne.n	8000b5a <HAL_GPIO_EXTI_Callback+0x22>
    {
    	if(NULL != hal_handler.callback_irq())
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4798      	blx	r3
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <HAL_GPIO_EXTI_Callback+0x22>
        {
            hal_handler.callback_irq();
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4798      	blx	r3
        }
    }
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000038 	.word	0x20000038

08000b68 <NRF24_Service_Init>:
        + NULL
    Output Parameter:
        + NULL
*/
NRF24_SERVICE_STATUS NRF24_Service_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Init())
 8000b6c:	f7ff fcb0 	bl	80004d0 <NRF24_HAL_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <NRF24_Service_Init+0x12>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e000      	b.n	8000b7c <NRF24_Service_Init+0x14>
    }
    return NRF24_SERVICE_STATUS_OK;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <NRF24_SoftReset_Init>:
        + NULL
    Output Parameter:
        + NULL
*/
NRF24_SERVICE_STATUS NRF24_SoftReset_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
    size_t ret;
	uint8_t addr0[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000b86:	4a87      	ldr	r2, [pc, #540]	; (8000da4 <NRF24_SoftReset_Init+0x224>)
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b90:	6018      	str	r0, [r3, #0]
 8000b92:	3304      	adds	r3, #4
 8000b94:	7019      	strb	r1, [r3, #0]
	uint8_t addr1[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000b96:	4a84      	ldr	r2, [pc, #528]	; (8000da8 <NRF24_SoftReset_Init+0x228>)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b9e:	6018      	str	r0, [r3, #0]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	7019      	strb	r1, [r3, #0]

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_CONFIG, 0x08, 1, 100))
 8000ba4:	2364      	movs	r3, #100	; 0x64
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2108      	movs	r1, #8
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fcb8 	bl	8000520 <NRF24_HAL_Write>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d101      	bne.n	8000bba <NRF24_SoftReset_Init+0x3a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0ef      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_EN_ACK, 0x3F, 1, 100))
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	213f      	movs	r1, #63	; 0x3f
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fcad 	bl	8000520 <NRF24_HAL_Write>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d101      	bne.n	8000bd0 <NRF24_SoftReset_Init+0x50>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e0e4      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_EN_RXADD, 0x03, 1, 100))
 8000bd0:	2364      	movs	r3, #100	; 0x64
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f7ff fca2 	bl	8000520 <NRF24_HAL_Write>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <NRF24_SoftReset_Init+0x66>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e0d9      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_SET_RETRANSMIT, 0x03, 1, 100))
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	2201      	movs	r2, #1
 8000bea:	2103      	movs	r1, #3
 8000bec:	2004      	movs	r0, #4
 8000bee:	f7ff fc97 	bl	8000520 <NRF24_HAL_Write>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d101      	bne.n	8000bfc <NRF24_SoftReset_Init+0x7c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e0ce      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RF_CHANNEL, 0x02, 1, 100))
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2102      	movs	r1, #2
 8000c02:	2005      	movs	r0, #5
 8000c04:	f7ff fc8c 	bl	8000520 <NRF24_HAL_Write>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d101      	bne.n	8000c12 <NRF24_SoftReset_Init+0x92>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e0c3      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_SET_RF, 0x07, 1, 100))
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	2201      	movs	r2, #1
 8000c16:	2107      	movs	r1, #7
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f7ff fc81 	bl	8000520 <NRF24_HAL_Write>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <NRF24_SoftReset_Init+0xa8>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e0b8      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_STATUS, 0x70, 1, 100))
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2170      	movs	r1, #112	; 0x70
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f7ff fc76 	bl	8000520 <NRF24_HAL_Write>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d101      	bne.n	8000c3e <NRF24_SoftReset_Init+0xbe>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0ad      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD0, addr0, 5, 100))
 8000c3e:	f107 0108 	add.w	r1, r7, #8
 8000c42:	2364      	movs	r3, #100	; 0x64
 8000c44:	2205      	movs	r2, #5
 8000c46:	200a      	movs	r0, #10
 8000c48:	f7ff fc6a 	bl	8000520 <NRF24_HAL_Write>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <NRF24_SoftReset_Init+0xd6>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e0a1      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD1, addr1, 5, 100))
 8000c56:	4639      	mov	r1, r7
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	2205      	movs	r2, #5
 8000c5c:	200b      	movs	r0, #11
 8000c5e:	f7ff fc5f 	bl	8000520 <NRF24_HAL_Write>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <NRF24_SoftReset_Init+0xec>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e096      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_TX_ADD, addr0, 5, 100))
 8000c6c:	f107 0108 	add.w	r1, r7, #8
 8000c70:	2364      	movs	r3, #100	; 0x64
 8000c72:	2205      	movs	r2, #5
 8000c74:	2010      	movs	r0, #16
 8000c76:	f7ff fc53 	bl	8000520 <NRF24_HAL_Write>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d101      	bne.n	8000c84 <NRF24_SoftReset_Init+0x104>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e08a      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD2, 0x03, 1, 100))
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	2201      	movs	r2, #1
 8000c88:	2103      	movs	r1, #3
 8000c8a:	200c      	movs	r0, #12
 8000c8c:	f7ff fc48 	bl	8000520 <NRF24_HAL_Write>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <NRF24_SoftReset_Init+0x11a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e07f      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD3, 0x04, 1, 100))
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2104      	movs	r1, #4
 8000ca0:	200d      	movs	r0, #13
 8000ca2:	f7ff fc3d 	bl	8000520 <NRF24_HAL_Write>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d101      	bne.n	8000cb0 <NRF24_SoftReset_Init+0x130>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e074      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD4, 0x05, 1, 100))
 8000cb0:	2364      	movs	r3, #100	; 0x64
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	200e      	movs	r0, #14
 8000cb8:	f7ff fc32 	bl	8000520 <NRF24_HAL_Write>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d101      	bne.n	8000cc6 <NRF24_SoftReset_Init+0x146>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e069      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_ADD5, 0x06, 1, 100))
 8000cc6:	2364      	movs	r3, #100	; 0x64
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2106      	movs	r1, #6
 8000ccc:	200f      	movs	r0, #15
 8000cce:	f7ff fc27 	bl	8000520 <NRF24_HAL_Write>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d101      	bne.n	8000cdc <NRF24_SoftReset_Init+0x15c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e05e      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P0, 0x00, 1, 100))
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2011      	movs	r0, #17
 8000ce4:	f7ff fc1c 	bl	8000520 <NRF24_HAL_Write>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <NRF24_SoftReset_Init+0x172>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e053      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P1, 0x00, 1, 100))
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2012      	movs	r0, #18
 8000cfa:	f7ff fc11 	bl	8000520 <NRF24_HAL_Write>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d101      	bne.n	8000d08 <NRF24_SoftReset_Init+0x188>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e048      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P2, 0x00, 1, 100))
 8000d08:	2364      	movs	r3, #100	; 0x64
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2013      	movs	r0, #19
 8000d10:	f7ff fc06 	bl	8000520 <NRF24_HAL_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d101      	bne.n	8000d1e <NRF24_SoftReset_Init+0x19e>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e03d      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P3, 0x00, 1, 100))
 8000d1e:	2364      	movs	r3, #100	; 0x64
 8000d20:	2201      	movs	r2, #1
 8000d22:	2100      	movs	r1, #0
 8000d24:	2014      	movs	r0, #20
 8000d26:	f7ff fbfb 	bl	8000520 <NRF24_HAL_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <NRF24_SoftReset_Init+0x1b4>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e032      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P4, 0x00, 1, 100))
 8000d34:	2364      	movs	r3, #100	; 0x64
 8000d36:	2201      	movs	r2, #1
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2015      	movs	r0, #21
 8000d3c:	f7ff fbf0 	bl	8000520 <NRF24_HAL_Write>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <NRF24_SoftReset_Init+0x1ca>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e027      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_RX_PW_P5, 0x00, 1, 100))
 8000d4a:	2364      	movs	r3, #100	; 0x64
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2016      	movs	r0, #22
 8000d52:	f7ff fbe5 	bl	8000520 <NRF24_HAL_Write>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <NRF24_SoftReset_Init+0x1e0>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e01c      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_DYNAMIC_PLD, 0x00, 1, 100))
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	2201      	movs	r2, #1
 8000d64:	2100      	movs	r1, #0
 8000d66:	201c      	movs	r0, #28
 8000d68:	f7ff fbda 	bl	8000520 <NRF24_HAL_Write>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d101      	bne.n	8000d76 <NRF24_SoftReset_Init+0x1f6>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e011      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Write(NRF24_REG_FEATURE, 0x00, 1, 100))
 8000d76:	2364      	movs	r3, #100	; 0x64
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	201d      	movs	r0, #29
 8000d7e:	f7ff fbcf 	bl	8000520 <NRF24_HAL_Write>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <NRF24_SoftReset_Init+0x20c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e006      	b.n	8000d9a <NRF24_SoftReset_Init+0x21a>
    }

    hal_handler.callback_irq    = NRF24_Handle_IRQ_Pin_Signal;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <NRF24_SoftReset_Init+0x22c>)
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <NRF24_SoftReset_Init+0x230>)
 8000d90:	601a      	str	r2, [r3, #0]
    hal_handler.callback_timer  = NRF24_Handle_Timer_IRQ;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <NRF24_SoftReset_Init+0x22c>)
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <NRF24_SoftReset_Init+0x234>)
 8000d96:	605a      	str	r2, [r3, #4]

    return NRF24_SERVICE_STATUS_OK;
 8000d98:	2300      	movs	r3, #0
};
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	080032f8 	.word	0x080032f8
 8000da8:	08003300 	.word	0x08003300
 8000dac:	20000038 	.word	0x20000038
 8000db0:	0800144d 	.word	0x0800144d
 8000db4:	08001501 	.word	0x08001501

08000db8 <NRF24_GetIRQ_Status>:
        + NULL
    Output Parameter:
        + Return value of NRF24_IRQ enum
*/
NRF24_IRQ NRF24_GetIRQ_Status(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
    uint8_t status_data = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
    
    status_data = NRF24_get_status_reg();
 8000dc2:	f000 fafe 	bl	80013c2 <NRF24_get_status_reg>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
    if(status_data == 0xFF)
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2bff      	cmp	r3, #255	; 0xff
 8000dce:	d101      	bne.n	8000dd4 <NRF24_GetIRQ_Status+0x1c>
    {
        return NRF24_IRQ_INVALID;
 8000dd0:	23ff      	movs	r3, #255	; 0xff
 8000dd2:	e018      	b.n	8000e06 <NRF24_GetIRQ_Status+0x4e>
    } 

    status_data = ~status_data;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	71fb      	strb	r3, [r7, #7]

    if((status_data & NRF24_IRQ_RX_DATA_READY) == NRF24_IRQ_RX_DATA_READY)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <NRF24_GetIRQ_Status+0x30>
    {
        return NRF24_IRQ_RX_DATA_READY;
 8000de4:	2320      	movs	r3, #32
 8000de6:	e00e      	b.n	8000e06 <NRF24_GetIRQ_Status+0x4e>
    }
    else if((status_data & NRF24_IRQ_TX_DATA_SENT) == NRF24_IRQ_TX_DATA_SENT)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <NRF24_GetIRQ_Status+0x3e>
    {
        return NRF24_IRQ_TX_DATA_SENT;
 8000df2:	2310      	movs	r3, #16
 8000df4:	e007      	b.n	8000e06 <NRF24_GetIRQ_Status+0x4e>
    }
    else if((status_data & NRF24_IRQ_MAX_RETRANSMIT) == NRF24_IRQ_MAX_RETRANSMIT)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <NRF24_GetIRQ_Status+0x4c>
    {
        return NRF24_IRQ_MAX_RETRANSMIT;
 8000e00:	2308      	movs	r3, #8
 8000e02:	e000      	b.n	8000e06 <NRF24_GetIRQ_Status+0x4e>
    }

    return NRF24_IRQ_INVALID;
 8000e04:	23ff      	movs	r3, #255	; 0xff
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <NRF24_Toggle_Debug_Pin>:
        + NULL
    Output Parameter:
        + NULL
*/
void NRF24_Toggle_Debug_Pin(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    NRF24_HAL_Control_DEBUG(NRF24_HAL_DEBUG_STATUS_HIGH);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fd23 	bl	8000860 <NRF24_HAL_Control_DEBUG>
    HAL_Delay(500000);
 8000e1a:	480b      	ldr	r0, [pc, #44]	; (8000e48 <NRF24_Toggle_Debug_Pin+0x38>)
 8000e1c:	f000 fbd8 	bl	80015d0 <HAL_Delay>
    NRF24_HAL_Control_DEBUG(NRF24_HAL_DEBUG_STATUS_LOW);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fd1d 	bl	8000860 <NRF24_HAL_Control_DEBUG>
    HAL_Delay(500000);
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <NRF24_Toggle_Debug_Pin+0x38>)
 8000e28:	f000 fbd2 	bl	80015d0 <HAL_Delay>
    NRF24_HAL_Control_DEBUG(NRF24_HAL_DEBUG_STATUS_HIGH);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff fd17 	bl	8000860 <NRF24_HAL_Control_DEBUG>
    HAL_Delay(500000);
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <NRF24_Toggle_Debug_Pin+0x38>)
 8000e34:	f000 fbcc 	bl	80015d0 <HAL_Delay>
    NRF24_HAL_Control_DEBUG(NRF24_HAL_DEBUG_STATUS_LOW);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fd11 	bl	8000860 <NRF24_HAL_Control_DEBUG>
    HAL_Delay(500000);
 8000e3e:	4802      	ldr	r0, [pc, #8]	; (8000e48 <NRF24_Toggle_Debug_Pin+0x38>)
 8000e40:	f000 fbc6 	bl	80015d0 <HAL_Delay>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	0007a120 	.word	0x0007a120

08000e4c <NRF24_SetAddress>:
        + addr_size: this is size of address input
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_SetAddress(uint8_t pipe_idx, uint8_t *address,uint8_t addr_size)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	71bb      	strb	r3, [r7, #6]
    if(pipe_idx > 6)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d901      	bls.n	8000e66 <NRF24_SetAddress+0x1a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e034      	b.n	8000ed0 <NRF24_SetAddress+0x84>
    }

    if((addr_size > 5) || (addr_size < 0))
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d901      	bls.n	8000e70 <NRF24_SetAddress+0x24>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e02f      	b.n	8000ed0 <NRF24_SetAddress+0x84>
    }

    switch (nRF24_address_regs[pipe_idx])
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <NRF24_SetAddress+0x8c>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	2b0a      	cmp	r3, #10
 8000e78:	d001      	beq.n	8000e7e <NRF24_SetAddress+0x32>
 8000e7a:	2b10      	cmp	r3, #16
 8000e7c:	d117      	bne.n	8000eae <NRF24_SetAddress+0x62>
          must be had same address like each other
        */
        case NRF24_REG_RX_ADD0:
        case NRF24_REG_TX_ADD:
            {
                if(NRF24_HAL_Write(NRF24_REG_RX_ADD0, address, addr_size, 100) != NRF24_SERVICE_STATUS_OK)
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	2364      	movs	r3, #100	; 0x64
 8000e84:	6839      	ldr	r1, [r7, #0]
 8000e86:	200a      	movs	r0, #10
 8000e88:	f7ff fb4a 	bl	8000520 <NRF24_HAL_Write>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <NRF24_SetAddress+0x4a>
                {
                    return NRF24_SERVICE_STATUS_FAIL;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e01c      	b.n	8000ed0 <NRF24_SetAddress+0x84>
                }

                if(NRF24_HAL_Write(NRF24_REG_TX_ADD, address, addr_size, 100) != NRF24_SERVICE_STATUS_OK)
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	2010      	movs	r0, #16
 8000ea0:	f7ff fb3e 	bl	8000520 <NRF24_HAL_Write>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00e      	beq.n	8000ec8 <NRF24_SetAddress+0x7c>
                {
                    return NRF24_SERVICE_STATUS_FAIL;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e010      	b.n	8000ed0 <NRF24_SetAddress+0x84>
            }
            break;
        
        default:
            {
                if(NRF24_HAL_Write(nRF24_address_regs[pipe_idx], address, 1, 100) != NRF24_SERVICE_STATUS_OK)
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <NRF24_SetAddress+0x8c>)
 8000eb2:	5cd0      	ldrb	r0, [r2, r3]
 8000eb4:	2364      	movs	r3, #100	; 0x64
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	6839      	ldr	r1, [r7, #0]
 8000eba:	f7ff fb31 	bl	8000520 <NRF24_HAL_Write>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <NRF24_SetAddress+0x80>
                {
                    return NRF24_SERVICE_STATUS_FAIL;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e003      	b.n	8000ed0 <NRF24_SetAddress+0x84>
            break;
 8000ec8:	bf00      	nop
 8000eca:	e000      	b.n	8000ece <NRF24_SetAddress+0x82>
                }
            }
            break;
 8000ecc:	bf00      	nop
    }    
    return NRF24_SERVICE_STATUS_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000000c 	.word	0x2000000c

08000edc <NRF24_En_Dis_PIPE>:
                 If is_en is true, that mean the RX PIPE will be enabled.
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_En_Dis_PIPE(NRF24_ENABLE_RX_PIPE pipe, bool is_en)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]
    uint8_t data_reg = 0xFF;
 8000eec:	23ff      	movs	r3, #255	; 0xff
 8000eee:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_EN_RXADD, &data_reg, 1, 100))
 8000ef0:	f107 010f 	add.w	r1, r7, #15
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f7ff fb79 	bl	80005f0 <NRF24_HAL_Read>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <NRF24_En_Dis_PIPE+0x2c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e022      	b.n	8000f4e <NRF24_En_Dis_PIPE+0x72>
    }

    if(is_en)
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <NRF24_En_Dis_PIPE+0x3e>
    {
        data_reg = data_reg | pipe;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e00c      	b.n	8000f34 <NRF24_En_Dis_PIPE+0x58>
    }
    else
    {
        data_reg = ~data_reg;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	73fb      	strb	r3, [r7, #15]
        data_reg = data_reg | pipe;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	73fb      	strb	r3, [r7, #15]
        data_reg = ~data_reg;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	73fb      	strb	r3, [r7, #15]
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_EN_RXADD, &data_reg, 1, 100))
 8000f34:	f107 010f 	add.w	r1, r7, #15
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f7ff faef 	bl	8000520 <NRF24_HAL_Write>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <NRF24_En_Dis_PIPE+0x70>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <NRF24_En_Dis_PIPE+0x72>
    }

    return NRF24_SERVICE_STATUS_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <NRF24_Set_RX_TX>:
        + trans_mode: this is value will set into PRIM_RX bit in CONFIG register
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE trans_mode)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8000f60:	2308      	movs	r3, #8
 8000f62:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8000f64:	f107 010f 	add.w	r1, r7, #15
 8000f68:	2364      	movs	r3, #100	; 0x64
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff fb3f 	bl	80005f0 <NRF24_HAL_Read>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <NRF24_Set_RX_TX+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e01e      	b.n	8000fba <NRF24_Set_RX_TX+0x64>
    }

    switch (trans_mode)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <NRF24_Set_RX_TX+0x32>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d006      	beq.n	8000f94 <NRF24_Set_RX_TX+0x3e>
 8000f86:	e00b      	b.n	8000fa0 <NRF24_Set_RX_TX+0x4a>
    {
        case NRF24_TRANSCIVER_MODE_TX:
            {
                /*Because, PRIM_RX bit is first bit in CONFIG reg*/
                data_reg = data_reg & 0x7E;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8000f92:	e005      	b.n	8000fa0 <NRF24_Set_RX_TX+0x4a>

        case NRF24_TRANSCIVER_MODE_RX:
            {
                data_reg |= trans_mode;
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8000f9e:	bf00      	nop
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8000fa0:	f107 010f 	add.w	r1, r7, #15
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fab9 	bl	8000520 <NRF24_HAL_Write>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <NRF24_Set_RX_TX+0x62>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <NRF24_Set_RX_TX+0x64>
    }
    return NRF24_SERVICE_STATUS_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <NRF24_Set_CRC_encoding>:
        + trans_mode: this is value will set into CRCO and EN_CRC bits in CONFIG register
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_CRC_encoding(NRF24_CRC_ENCODE no_byte)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8000fd0:	f107 010f 	add.w	r1, r7, #15
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fb09 	bl	80005f0 <NRF24_HAL_Read>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <NRF24_Set_CRC_encoding+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e032      	b.n	800104e <NRF24_Set_CRC_encoding+0x8c>
    }

    switch (no_byte)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d017      	beq.n	800101e <NRF24_Set_CRC_encoding+0x5c>
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	dc20      	bgt.n	8001034 <NRF24_Set_CRC_encoding+0x72>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <NRF24_Set_CRC_encoding+0x3a>
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d006      	beq.n	8001008 <NRF24_Set_CRC_encoding+0x46>
 8000ffa:	e01b      	b.n	8001034 <NRF24_Set_CRC_encoding+0x72>
            {
                /*
                    Because, CRCO bit is third bit in CONFIG reg
                    and EN_CRC bit is forth bit in CONFIG reg
                */
                data_reg = data_reg & 0x73;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f003 0373 	and.w	r3, r3, #115	; 0x73
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001006:	e015      	b.n	8001034 <NRF24_Set_CRC_encoding+0x72>
            {
                /*
                    Because, CRCO bit is third bit in CONFIG reg
                    and EN_CRC bit is forth bit in CONFIG reg
                */
                data_reg = (data_reg & 0x73) | NRF24_CRC_ENCODE_1BYTE;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	b25b      	sxtb	r3, r3
 800100c:	f003 0373 	and.w	r3, r3, #115	; 0x73
 8001010:	b25b      	sxtb	r3, r3
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	b25b      	sxtb	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800101c:	e00a      	b.n	8001034 <NRF24_Set_CRC_encoding+0x72>
            {
                /*
                    Because, CRCO bit is third bit in CONFIG reg
                    and EN_CRC bit is forth bit in CONFIG reg
                */
                data_reg = (data_reg & 0x73) | NRF24_CRC_ENCODE_2BYTE;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	b25b      	sxtb	r3, r3
 8001022:	f003 0373 	and.w	r3, r3, #115	; 0x73
 8001026:	b25b      	sxtb	r3, r3
 8001028:	f043 030c 	orr.w	r3, r3, #12
 800102c:	b25b      	sxtb	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001032:	bf00      	nop
    }   

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_CONFIG, &data_reg, 1, 100))
 8001034:	f107 010f 	add.w	r1, r7, #15
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	2201      	movs	r2, #1
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fa6f 	bl	8000520 <NRF24_HAL_Write>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <NRF24_Set_CRC_encoding+0x8a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <NRF24_Set_CRC_encoding+0x8c>
    }
    return NRF24_SERVICE_STATUS_OK; 
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <NRF24_Config_IRQ_Mask>:
        + irq_en: this is used to allow enable or disable interrupt of NRF24L01
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Config_IRQ_Mask(NRF24_CONFIG_IRQ_MASK irq_mask, bool irq_en)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	460a      	mov	r2, r1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	4613      	mov	r3, r2
 8001064:	71bb      	strb	r3, [r7, #6]
    uint8_t data_reg = 0x08;
 8001066:	2308      	movs	r3, #8
 8001068:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_CONFIG, &data_reg, 1, 100))
 800106a:	f107 010f 	add.w	r1, r7, #15
 800106e:	2364      	movs	r3, #100	; 0x64
 8001070:	2201      	movs	r2, #1
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fabc 	bl	80005f0 <NRF24_HAL_Read>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <NRF24_Config_IRQ_Mask+0x2c>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800107e:	2301      	movs	r3, #1
 8001080:	e022      	b.n	80010c8 <NRF24_Config_IRQ_Mask+0x72>
    }

    if(irq_en)
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <NRF24_Config_IRQ_Mask+0x3e>
    {
        data_reg = data_reg | irq_mask;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e00c      	b.n	80010ae <NRF24_Config_IRQ_Mask+0x58>
    }
    else
    {
        data_reg = ~data_reg;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	43db      	mvns	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	73fb      	strb	r3, [r7, #15]
        data_reg = data_reg | irq_mask;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
        data_reg = ~data_reg;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	73fb      	strb	r3, [r7, #15]
    }   

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_CONFIG, &data_reg, 1, 100))
 80010ae:	f107 010f 	add.w	r1, r7, #15
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	2201      	movs	r2, #1
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fa32 	bl	8000520 <NRF24_HAL_Write>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <NRF24_Config_IRQ_Mask+0x70>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <NRF24_Config_IRQ_Mask+0x72>
    }
    return NRF24_SERVICE_STATUS_OK; 
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <NRF24_Set_Addr_Width>:
                     into AW bit of SETUP_AW register
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_Addr_Width(NRF24_SET_ADDR_WIDTH add_width)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_CONFIG, &add_width, 1, 100))
 80010da:	1df9      	adds	r1, r7, #7
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	2201      	movs	r2, #1
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fa1d 	bl	8000520 <NRF24_HAL_Write>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <NRF24_Set_Addr_Width+0x20>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <NRF24_Set_Addr_Width+0x22>
    }
    return NRF24_SERVICE_STATUS_OK; 
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <NRF24_Set_Auto_Retransmit_Delay>:
                    into AW bit of ARD register of SETUP_RETR
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_Auto_Retransmit_Delay(NRF24_RETRANSMIT_DELAY delay_rt)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8001104:	2308      	movs	r3, #8
 8001106:	73bb      	strb	r3, [r7, #14]
    uint8_t set_value;

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_SET_RETRANSMIT, &data_reg, 1, 100))
 8001108:	f107 010e 	add.w	r1, r7, #14
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	2201      	movs	r2, #1
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff fa6d 	bl	80005f0 <NRF24_HAL_Read>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <NRF24_Set_Auto_Retransmit_Delay+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800111c:	2301      	movs	r3, #1
 800111e:	e014      	b.n	800114a <NRF24_Set_Auto_Retransmit_Delay+0x50>
    }

    set_value = (delay_rt << 4) & 0xF0;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	73fb      	strb	r3, [r7, #15]
    data_reg = data_reg | set_value;
 8001126:	7bba      	ldrb	r2, [r7, #14]
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	4313      	orrs	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73bb      	strb	r3, [r7, #14]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_SET_RETRANSMIT, &data_reg, 1, 100))
 8001130:	f107 010e 	add.w	r1, r7, #14
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	2201      	movs	r2, #1
 8001138:	2004      	movs	r0, #4
 800113a:	f7ff f9f1 	bl	8000520 <NRF24_HAL_Write>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <NRF24_Set_Auto_Retransmit_Delay+0x4e>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <NRF24_Set_Auto_Retransmit_Delay+0x50>
    }
    return NRF24_SERVICE_STATUS_OK;     
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <NRF24_Set_Auto_Retransmit_Count>:
        + set_count: this is value will set no of retranmit
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_Auto_Retransmit_Count(uint8_t set_count)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 800115c:	2308      	movs	r3, #8
 800115e:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_SET_RETRANSMIT, &data_reg, 1, 100))
 8001160:	f107 010f 	add.w	r1, r7, #15
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	2201      	movs	r2, #1
 8001168:	2004      	movs	r0, #4
 800116a:	f7ff fa41 	bl	80005f0 <NRF24_HAL_Read>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <NRF24_Set_Auto_Retransmit_Count+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001174:	2301      	movs	r3, #1
 8001176:	e011      	b.n	800119c <NRF24_Set_Auto_Retransmit_Count+0x4a>
    }

    data_reg = data_reg | set_count;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4313      	orrs	r3, r2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_SET_RETRANSMIT, &data_reg, 1, 100))
 8001182:	f107 010f 	add.w	r1, r7, #15
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	2004      	movs	r0, #4
 800118c:	f7ff f9c8 	bl	8000520 <NRF24_HAL_Write>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <NRF24_Set_Auto_Retransmit_Count+0x48>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <NRF24_Set_Auto_Retransmit_Count+0x4a>
    }
    return NRF24_SERVICE_STATUS_OK;        
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <NRF24_Set_RF_Channel>:
        + rf_channel: this is value will rf channel of device
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_RF_Channel(uint8_t rf_channel)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 80011ae:	2308      	movs	r3, #8
 80011b0:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_RF_CHANNEL, &data_reg, 1, 100))
 80011b2:	f107 010f 	add.w	r1, r7, #15
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	2201      	movs	r2, #1
 80011ba:	2005      	movs	r0, #5
 80011bc:	f7ff fa18 	bl	80005f0 <NRF24_HAL_Read>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <NRF24_Set_RF_Channel+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e011      	b.n	80011ee <NRF24_Set_RF_Channel+0x4a>
    }

    data_reg = data_reg | rf_channel;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_RF_CHANNEL, &data_reg, 1, 100))
 80011d4:	f107 010f 	add.w	r1, r7, #15
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	2201      	movs	r2, #1
 80011dc:	2005      	movs	r0, #5
 80011de:	f7ff f99f 	bl	8000520 <NRF24_HAL_Write>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <NRF24_Set_RF_Channel+0x48>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <NRF24_Set_RF_Channel+0x4a>
    }
    return NRF24_SERVICE_STATUS_OK;   
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <NRF24_Set_RF_Data_Rate>:
        + data_rate: this is value will rf data rate of device
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_RF_Data_Rate(NRF24_DATA_RATE data_rate)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8001200:	2308      	movs	r3, #8
 8001202:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_SET_RF, &data_reg, 1, 100))
 8001204:	f107 010f 	add.w	r1, r7, #15
 8001208:	2364      	movs	r3, #100	; 0x64
 800120a:	2201      	movs	r2, #1
 800120c:	2006      	movs	r0, #6
 800120e:	f7ff f9ef 	bl	80005f0 <NRF24_HAL_Read>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <NRF24_Set_RF_Data_Rate+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001218:	2301      	movs	r3, #1
 800121a:	e011      	b.n	8001240 <NRF24_Set_RF_Data_Rate+0x4a>
    }

    data_reg = data_reg | data_rate;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4313      	orrs	r3, r2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_SET_RF, &data_reg, 1, 100))
 8001226:	f107 010f 	add.w	r1, r7, #15
 800122a:	2364      	movs	r3, #100	; 0x64
 800122c:	2201      	movs	r2, #1
 800122e:	2006      	movs	r0, #6
 8001230:	f7ff f976 	bl	8000520 <NRF24_HAL_Write>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <NRF24_Set_RF_Data_Rate+0x48>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <NRF24_Set_RF_Data_Rate+0x4a>
    }
    return NRF24_SERVICE_STATUS_OK;  
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <NRF24_Set_RF_PWR>:
        + data_rate: this is value will rf pwr transmit of device
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_RF_PWR(NRF24_OUTPUT_PWR rf_pwr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0x08;
 8001252:	2308      	movs	r3, #8
 8001254:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_SET_RF, &data_reg, 1, 100))
 8001256:	f107 010f 	add.w	r1, r7, #15
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	2201      	movs	r2, #1
 800125e:	2006      	movs	r0, #6
 8001260:	f7ff f9c6 	bl	80005f0 <NRF24_HAL_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <NRF24_Set_RF_PWR+0x26>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800126a:	2301      	movs	r3, #1
 800126c:	e011      	b.n	8001292 <NRF24_Set_RF_PWR+0x4a>
    }

    data_reg = data_reg | rf_pwr;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4313      	orrs	r3, r2
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_SET_RF, &data_reg, 1, 100))
 8001278:	f107 010f 	add.w	r1, r7, #15
 800127c:	2364      	movs	r3, #100	; 0x64
 800127e:	2201      	movs	r2, #1
 8001280:	2006      	movs	r0, #6
 8001282:	f7ff f94d 	bl	8000520 <NRF24_HAL_Write>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <NRF24_Set_RF_PWR+0x48>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <NRF24_Set_RF_PWR+0x4a>
    }
    return NRF24_SERVICE_STATUS_OK;  
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <NRF24_Get_TX_FIFO_Status>:
        + NULL
    Output Parameter:
        + Return value of TX FIFO in FIFO_STATUS register
*/
NRF24_TXFIFO_STATUS  NRF24_Get_TX_FIFO_Status(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
    uint8_t data_reg;
    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_FIFO_STATUS, &data_reg, 1, 100))
 80012a0:	1df9      	adds	r1, r7, #7
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	2201      	movs	r2, #1
 80012a6:	2017      	movs	r0, #23
 80012a8:	f7ff f9a2 	bl	80005f0 <NRF24_HAL_Read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <NRF24_Get_TX_FIFO_Status+0x1c>
    {
        return NRF24_RECEIVE_PWR_NONE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e002      	b.n	80012bc <NRF24_Get_TX_FIFO_Status+0x22>
    }

    return (NRF24_TXFIFO_STATUS)(data_reg >> 4);    
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	b2db      	uxtb	r3, r3
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <NRF24_Set_DYNPLD_For_PIPE>:
        + mode: this is used to know which mode is used
    Output Parameter:
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Set_DYNPLD_For_PIPE(uint8_t pipe_idx, NRF24_DYNAMIC_PLD mode)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
    uint8_t data_reg;

    if(pipe_idx > NRF24_MAX_PIPE_IDX)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d901      	bls.n	80012de <NRF24_Set_DYNPLD_For_PIPE+0x1a>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80012da:	2301      	movs	r3, #1
 80012dc:	e037      	b.n	800134e <NRF24_Set_DYNPLD_For_PIPE+0x8a>
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Read(NRF24_REG_DYNAMIC_PLD, &data_reg, 1, 100))
 80012de:	f107 010f 	add.w	r1, r7, #15
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	2201      	movs	r2, #1
 80012e6:	201c      	movs	r0, #28
 80012e8:	f7ff f982 	bl	80005f0 <NRF24_HAL_Read>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <NRF24_Set_DYNPLD_For_PIPE+0x32>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e02b      	b.n	800134e <NRF24_Set_DYNPLD_For_PIPE+0x8a>
    }

    switch (mode)
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00d      	beq.n	8001318 <NRF24_Set_DYNPLD_For_PIPE+0x54>
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d119      	bne.n	8001334 <NRF24_Set_DYNPLD_For_PIPE+0x70>
    {
        case NRF24_DYNAMIC_PLD_ON:
        {
            data_reg = data_reg | (0x01 << pipe_idx);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2201      	movs	r2, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	b25a      	sxtb	r2, r3
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b25b      	sxtb	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8001316:	e00d      	b.n	8001334 <NRF24_Set_DYNPLD_For_PIPE+0x70>

        case NRF24_DYNAMIC_PLD_OFF:
        {
            data_reg = data_reg & (~(0x01 << pipe_idx));
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2201      	movs	r2, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	b25b      	sxtb	r3, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	b25a      	sxtb	r2, r3
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	b25b      	sxtb	r3, r3
 800132a:	4013      	ands	r3, r2
 800132c:	b25b      	sxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8001332:	bf00      	nop
    }

    if(NRF24_HAL_STATUS_OK != NRF24_HAL_Write(NRF24_REG_DYNAMIC_PLD, &data_reg, 1, 100))
 8001334:	f107 010f 	add.w	r1, r7, #15
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	2201      	movs	r2, #1
 800133c:	201c      	movs	r0, #28
 800133e:	f7ff f8ef 	bl	8000520 <NRF24_HAL_Write>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <NRF24_Set_DYNPLD_For_PIPE+0x88>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <NRF24_Set_DYNPLD_For_PIPE+0x8a>
    }

    return NRF24_SERVICE_STATUS_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <NRF24_Read_RX_PLD>:
    Output Parameter:
        + pld: this is data rx payload.
        + Return status to know the process is success or failed
*/
NRF24_SERVICE_STATUS NRF24_Read_RX_PLD(NRF24_RX_PLD *pld)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
    uint8_t status_reg = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]

    status_reg = NRF24_get_status_reg();
 8001362:	f000 f82e 	bl	80013c2 <NRF24_get_status_reg>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]
    if(0xFF == status_reg)
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2bff      	cmp	r3, #255	; 0xff
 800136e:	d101      	bne.n	8001374 <NRF24_Read_RX_PLD+0x1e>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 8001370:	2301      	movs	r3, #1
 8001372:	e022      	b.n	80013ba <NRF24_Read_RX_PLD+0x64>
    }

    /*Because Pipe idx is in 3 bit from second to fourth bit of STATUS register*/
    pld->pipe_idx = (status_reg >> 1) & 0x07;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	b2da      	uxtb	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	701a      	strb	r2, [r3, #0]

    pld->pld_size = NRF24_get_pld_size_of_rx_pipe(pld->pipe_idx);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f82f 	bl	80013ec <NRF24_get_pld_size_of_rx_pipe>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    if(pld->pld_size == 0x00)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <NRF24_Read_RX_PLD+0x50>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e009      	b.n	80013ba <NRF24_Read_RX_PLD+0x64>
    }

    return NRF24_get_pld_data_in_RX_FIFO(pld->data_pld, pld->pld_size);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f000 f834 	bl	8001420 <NRF24_get_pld_data_in_RX_FIFO>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <NRF24_get_status_reg>:
        + NULL
    Output Parameter:
        + Return value of STATUS register
*/
static uint8_t NRF24_get_status_reg(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
    uint8_t status_data = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	71fb      	strb	r3, [r7, #7]
    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Read(NRF24_REG_STATUS, &status_data, 1, 100))
 80013cc:	1df9      	adds	r1, r7, #7
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	2201      	movs	r2, #1
 80013d2:	2007      	movs	r0, #7
 80013d4:	f7ff f90c 	bl	80005f0 <NRF24_HAL_Read>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <NRF24_get_status_reg+0x20>
    {
        return 0xFF;
 80013de:	23ff      	movs	r3, #255	; 0xff
 80013e0:	e000      	b.n	80013e4 <NRF24_get_status_reg+0x22>
    }
    return status_data;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <NRF24_get_pld_size_of_rx_pipe>:
        + pipe_idx: this is pipe index
    Output Parameter:
        + Return no of byte in RX FIFO
*/
static uint8_t NRF24_get_pld_size_of_rx_pipe(uint8_t pipe_idx)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
    uint8_t data_reg = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_Read(NRF24_REG_RX_PW_P0 + pipe_idx, &data_reg, 1, 100))
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	3311      	adds	r3, #17
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	f107 010f 	add.w	r1, r7, #15
 8001404:	2364      	movs	r3, #100	; 0x64
 8001406:	2201      	movs	r2, #1
 8001408:	f7ff f8f2 	bl	80005f0 <NRF24_HAL_Read>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <NRF24_get_pld_size_of_rx_pipe+0x2a>
    {
        return 0x00;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <NRF24_get_pld_size_of_rx_pipe+0x2c>
    }
    return data_reg;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <NRF24_get_pld_data_in_RX_FIFO>:
    Output Parameter:
        + pld: this is array data PLD packet
        + Return status to know the process is success or failed
*/
static NRF24_SERVICE_STATUS NRF24_get_pld_data_in_RX_FIFO(uint8_t *pld, uint8_t pld_size)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
    if(NRF24_HAL_STATUS_FAIL == NRF24_HAL_CMD(NRF24_CMD_READ_RX_PAYLOAD, &pld, 1, 100))
 800142c:	1d39      	adds	r1, r7, #4
 800142e:	2364      	movs	r3, #100	; 0x64
 8001430:	2201      	movs	r2, #1
 8001432:	2061      	movs	r0, #97	; 0x61
 8001434:	f7ff f976 	bl	8000724 <NRF24_HAL_CMD>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <NRF24_get_pld_data_in_RX_FIFO+0x22>
    {
        return NRF24_SERVICE_STATUS_FAIL;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <NRF24_get_pld_data_in_RX_FIFO+0x24>
    }
    return NRF24_SERVICE_STATUS_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <NRF24_Handle_IRQ_Pin_Signal>:
        + NULL
    Output Parameter:
        + NULL
*/
static uint8_t NRF24_Handle_IRQ_Pin_Signal(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
    NRF24_IRQ irq_status;

    irq_status = NRF24_GetIRQ_Status();
 8001452:	f7ff fcb1 	bl	8000db8 <NRF24_GetIRQ_Status>
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]

    switch (irq_status)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b20      	cmp	r3, #32
 800145e:	d006      	beq.n	800146e <NRF24_Handle_IRQ_Pin_Signal+0x22>
 8001460:	2b20      	cmp	r3, #32
 8001462:	dc44      	bgt.n	80014ee <NRF24_Handle_IRQ_Pin_Signal+0xa2>
 8001464:	2b08      	cmp	r3, #8
 8001466:	d018      	beq.n	800149a <NRF24_Handle_IRQ_Pin_Signal+0x4e>
 8001468:	2b10      	cmp	r3, #16
 800146a:	d026      	beq.n	80014ba <NRF24_Handle_IRQ_Pin_Signal+0x6e>
 800146c:	e03f      	b.n	80014ee <NRF24_Handle_IRQ_Pin_Signal+0xa2>
    {
        case NRF24_IRQ_RX_DATA_READY:
            {
                if(NRF24_SERVICE_STATUS_FAIL == NRF24_Read_RX_PLD(&global_rx_pkt))
 800146e:	4822      	ldr	r0, [pc, #136]	; (80014f8 <NRF24_Handle_IRQ_Pin_Signal+0xac>)
 8001470:	f7ff ff71 	bl	8001356 <NRF24_Read_RX_PLD>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d105      	bne.n	8001486 <NRF24_Handle_IRQ_Pin_Signal+0x3a>
                {
                    memset(&global_rx_pkt, 0, sizeof(NRF24_RX_PLD));
 800147a:	2222      	movs	r2, #34	; 0x22
 800147c:	2100      	movs	r1, #0
 800147e:	481e      	ldr	r0, [pc, #120]	; (80014f8 <NRF24_Handle_IRQ_Pin_Signal+0xac>)
 8001480:	f001 ff26 	bl	80032d0 <memset>
                    nrf24_ser_handler.transmit_done = false;
                    nrf24_ser_handler.rx_data_ready = true;
                    nrf24_ser_handler.transmit_err  = false;
                }
            }
            break;
 8001484:	e033      	b.n	80014ee <NRF24_Handle_IRQ_Pin_Signal+0xa2>
                    nrf24_ser_handler.transmit_done = false;
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 8001488:	2200      	movs	r2, #0
 800148a:	709a      	strb	r2, [r3, #2]
                    nrf24_ser_handler.rx_data_ready = true;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 800148e:	2201      	movs	r2, #1
 8001490:	70da      	strb	r2, [r3, #3]
                    nrf24_ser_handler.transmit_err  = false;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 8001494:	2200      	movs	r2, #0
 8001496:	711a      	strb	r2, [r3, #4]
            break;
 8001498:	e029      	b.n	80014ee <NRF24_Handle_IRQ_Pin_Signal+0xa2>
        
        case NRF24_IRQ_MAX_RETRANSMIT:
            {
                (void)NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE_RX);
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fd5b 	bl	8000f56 <NRF24_Set_RX_TX>
                nrf24_ser_handler.mode          = NRF24_TRANSCIVER_MODE_RX;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	715a      	strb	r2, [r3, #5]
                nrf24_ser_handler.transmit_done = false;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	709a      	strb	r2, [r3, #2]
                nrf24_ser_handler.rx_data_ready = false;
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	70da      	strb	r2, [r3, #3]
                nrf24_ser_handler.transmit_err  = true;
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	711a      	strb	r2, [r3, #4]
            }
            break;
 80014b8:	e019      	b.n	80014ee <NRF24_Handle_IRQ_Pin_Signal+0xa2>
        
        case NRF24_IRQ_TX_DATA_SENT:
            {
                if((NRF24_TXFIFO_STATUS_ERROR == NRF24_Get_TX_FIFO_Status()) ||\
 80014ba:	f7ff feee 	bl	800129a <NRF24_Get_TX_FIFO_Status>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d004      	beq.n	80014ce <NRF24_Handle_IRQ_Pin_Signal+0x82>
                   (NRF24_TXFIFO_STATUS_EMPTY == NRF24_Get_TX_FIFO_Status()))
 80014c4:	f7ff fee9 	bl	800129a <NRF24_Get_TX_FIFO_Status>
 80014c8:	4603      	mov	r3, r0
                if((NRF24_TXFIFO_STATUS_ERROR == NRF24_Get_TX_FIFO_Status()) ||\
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10e      	bne.n	80014ec <NRF24_Handle_IRQ_Pin_Signal+0xa0>
                {
                    (void)NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE_RX);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff fd41 	bl	8000f56 <NRF24_Set_RX_TX>
                    nrf24_ser_handler.mode          = NRF24_TRANSCIVER_MODE_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	715a      	strb	r2, [r3, #5]
                    nrf24_ser_handler.transmit_done = true;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014dc:	2201      	movs	r2, #1
 80014de:	709a      	strb	r2, [r3, #2]
                    nrf24_ser_handler.rx_data_ready = false;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	70da      	strb	r2, [r3, #3]
                    nrf24_ser_handler.transmit_err  = false;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <NRF24_Handle_IRQ_Pin_Signal+0xb0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	711a      	strb	r2, [r3, #4]
                }
            }
            break;
 80014ec:	bf00      	nop
    }
    return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200000fc 	.word	0x200000fc
 80014fc:	200000e0 	.word	0x200000e0

08001500 <NRF24_Handle_Timer_IRQ>:
        + NULL
    Output Parameter:
        + NULL
*/
static uint8_t NRF24_Handle_Timer_IRQ(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    if(nrf24_ser_handler.mode == NRF24_TRANSCIVER_MODE_RX)
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <NRF24_Handle_Timer_IRQ+0x34>)
 8001506:	795b      	ldrb	r3, [r3, #5]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10f      	bne.n	800152c <NRF24_Handle_Timer_IRQ+0x2c>
    {
        if((NRF24_TXFIFO_STATUS_ERROR != NRF24_Get_TX_FIFO_Status()) ||\
 800150c:	f7ff fec5 	bl	800129a <NRF24_Get_TX_FIFO_Status>
 8001510:	4603      	mov	r3, r0
 8001512:	2b03      	cmp	r3, #3
 8001514:	d104      	bne.n	8001520 <NRF24_Handle_Timer_IRQ+0x20>
            (NRF24_TXFIFO_STATUS_EMPTY != NRF24_Get_TX_FIFO_Status()))
 8001516:	f7ff fec0 	bl	800129a <NRF24_Get_TX_FIFO_Status>
 800151a:	4603      	mov	r3, r0
        if((NRF24_TXFIFO_STATUS_ERROR != NRF24_Get_TX_FIFO_Status()) ||\
 800151c:	2b01      	cmp	r3, #1
 800151e:	d005      	beq.n	800152c <NRF24_Handle_Timer_IRQ+0x2c>
        {
            (void)NRF24_Set_RX_TX(NRF24_TRANSCIVER_MODE_TX);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fd18 	bl	8000f56 <NRF24_Set_RX_TX>
            nrf24_ser_handler.mode = NRF24_TRANSCIVER_MODE_TX;
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <NRF24_Handle_Timer_IRQ+0x34>)
 8001528:	2200      	movs	r2, #0
 800152a:	715a      	strb	r2, [r3, #5]
        }
    }
    return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200000e0 	.word	0x200000e0

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f930 	bl	80017bc <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f8f8 	bl	8001768 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000008 	.word	0x20000008
 8001590:	20000018 	.word	0x20000018
 8001594:	20000014 	.word	0x20000014

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <HAL_IncTick+0x20>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000018 	.word	0x20000018
 80015b8:	20000120 	.word	0x20000120

080015bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <HAL_GetTick+0x10>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000120 	.word	0x20000120

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff fff0 	bl	80015bc <HAL_GetTick>
 80015dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d005      	beq.n	80015f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_Delay+0x44>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f6:	bf00      	nop
 80015f8:	f7ff ffe0 	bl	80015bc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	429a      	cmp	r2, r3
 8001606:	d8f7      	bhi.n	80015f8 <HAL_Delay+0x28>
  {
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000018 	.word	0x20000018

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4906      	ldr	r1, [pc, #24]	; (8001668 <__NVIC_EnableIRQ+0x34>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff90 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177a:	f7ff ff4d 	bl	8001618 <__NVIC_GetPriorityGrouping>
 800177e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	6978      	ldr	r0, [r7, #20]
 8001786:	f7ff ff9b 	bl	80016c0 <NVIC_EncodePriority>
 800178a:	4602      	mov	r2, r0
 800178c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff6a 	bl	800166c <__NVIC_SetPriority>
}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff40 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ffad 	bl	8001724 <SysTick_Config>
 80017ca:	4603      	mov	r3, r0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b08b      	sub	sp, #44	; 0x2c
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e6:	e169      	b.n	8001abc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e8:	2201      	movs	r2, #1
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8158 	bne.w	8001ab6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4a9a      	ldr	r2, [pc, #616]	; (8001a74 <HAL_GPIO_Init+0x2a0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d05e      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001810:	4a98      	ldr	r2, [pc, #608]	; (8001a74 <HAL_GPIO_Init+0x2a0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d875      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001816:	4a98      	ldr	r2, [pc, #608]	; (8001a78 <HAL_GPIO_Init+0x2a4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d058      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 800181c:	4a96      	ldr	r2, [pc, #600]	; (8001a78 <HAL_GPIO_Init+0x2a4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d86f      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001822:	4a96      	ldr	r2, [pc, #600]	; (8001a7c <HAL_GPIO_Init+0x2a8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d052      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001828:	4a94      	ldr	r2, [pc, #592]	; (8001a7c <HAL_GPIO_Init+0x2a8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d869      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800182e:	4a94      	ldr	r2, [pc, #592]	; (8001a80 <HAL_GPIO_Init+0x2ac>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d04c      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001834:	4a92      	ldr	r2, [pc, #584]	; (8001a80 <HAL_GPIO_Init+0x2ac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d863      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800183a:	4a92      	ldr	r2, [pc, #584]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d046      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001840:	4a90      	ldr	r2, [pc, #576]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d85d      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001846:	2b12      	cmp	r3, #18
 8001848:	d82a      	bhi.n	80018a0 <HAL_GPIO_Init+0xcc>
 800184a:	2b12      	cmp	r3, #18
 800184c:	d859      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <HAL_GPIO_Init+0x80>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018a9 	.word	0x080018a9
 800185c:	080018bb 	.word	0x080018bb
 8001860:	080018fd 	.word	0x080018fd
 8001864:	08001903 	.word	0x08001903
 8001868:	08001903 	.word	0x08001903
 800186c:	08001903 	.word	0x08001903
 8001870:	08001903 	.word	0x08001903
 8001874:	08001903 	.word	0x08001903
 8001878:	08001903 	.word	0x08001903
 800187c:	08001903 	.word	0x08001903
 8001880:	08001903 	.word	0x08001903
 8001884:	08001903 	.word	0x08001903
 8001888:	08001903 	.word	0x08001903
 800188c:	08001903 	.word	0x08001903
 8001890:	08001903 	.word	0x08001903
 8001894:	08001903 	.word	0x08001903
 8001898:	080018b1 	.word	0x080018b1
 800189c:	080018c5 	.word	0x080018c5
 80018a0:	4a79      	ldr	r2, [pc, #484]	; (8001a88 <HAL_GPIO_Init+0x2b4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018a6:	e02c      	b.n	8001902 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e029      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	3304      	adds	r3, #4
 80018b6:	623b      	str	r3, [r7, #32]
          break;
 80018b8:	e024      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	3308      	adds	r3, #8
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e01f      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	330c      	adds	r3, #12
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e01a      	b.n	8001904 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018d6:	2304      	movs	r3, #4
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e013      	b.n	8001904 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e4:	2308      	movs	r3, #8
 80018e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	611a      	str	r2, [r3, #16]
          break;
 80018ee:	e009      	b.n	8001904 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f0:	2308      	movs	r3, #8
 80018f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	615a      	str	r2, [r3, #20]
          break;
 80018fa:	e003      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
          break;
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x130>
          break;
 8001902:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d801      	bhi.n	800190e <HAL_GPIO_Init+0x13a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	e001      	b.n	8001912 <HAL_GPIO_Init+0x13e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3304      	adds	r3, #4
 8001912:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d802      	bhi.n	8001920 <HAL_GPIO_Init+0x14c>
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	e002      	b.n	8001926 <HAL_GPIO_Init+0x152>
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	3b08      	subs	r3, #8
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	210f      	movs	r1, #15
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	401a      	ands	r2, r3
 8001938:	6a39      	ldr	r1, [r7, #32]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80b1 	beq.w	8001ab6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001954:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a4c      	ldr	r2, [pc, #304]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800196c:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <HAL_GPIO_Init+0x2bc>)
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <HAL_GPIO_Init+0x2c0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <HAL_GPIO_Init+0x2c4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3e      	ldr	r2, [pc, #248]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3d      	ldr	r2, [pc, #244]	; (8001aa0 <HAL_GPIO_Init+0x2cc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1e0>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e006      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e004      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e002      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019c0:	2300      	movs	r3, #0
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	f002 0203 	and.w	r2, r2, #3
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	4093      	lsls	r3, r2
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019d2:	492f      	ldr	r1, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x2bc>)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	492c      	ldr	r1, [pc, #176]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4928      	ldr	r1, [pc, #160]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4922      	ldr	r1, [pc, #136]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	491e      	ldr	r1, [pc, #120]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4914      	ldr	r1, [pc, #80]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d021      	beq.n	8001aa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
 8001a70:	e021      	b.n	8001ab6 <HAL_GPIO_Init+0x2e2>
 8001a72:	bf00      	nop
 8001a74:	10320000 	.word	0x10320000
 8001a78:	10310000 	.word	0x10310000
 8001a7c:	10220000 	.word	0x10220000
 8001a80:	10210000 	.word	0x10210000
 8001a84:	10120000 	.word	0x10120000
 8001a88:	10110000 	.word	0x10110000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40011400 	.word	0x40011400
 8001aa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	4909      	ldr	r1, [pc, #36]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	3301      	adds	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f47f ae8e 	bne.w	80017e8 <HAL_GPIO_Init+0x14>
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	372c      	adds	r7, #44	; 0x2c
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f804 	bl	8000b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e26c      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8087 	beq.w	8001c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5c:	4b92      	ldr	r3, [pc, #584]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b68:	4b8f      	ldr	r3, [pc, #572]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d112      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d10b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x12c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d168      	bne.n	8001c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e246      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x76>
 8001ba4:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a7f      	ldr	r2, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a77      	ldr	r2, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xbc>
 8001bde:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fcd0 	bl	80015bc <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fccc 	bl	80015bc <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1fa      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe4>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fcbc 	bl	80015bc <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fcb8 	bl	80015bc <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1e6      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x10c>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c76:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1ba      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4939      	ldr	r1, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fc71 	bl	80015bc <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fc6d 	bl	80015bc <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e19b      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4927      	ldr	r1, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fc50 	bl	80015bc <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fc4c 	bl	80015bc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e17a      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d019      	beq.n	8001d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff fc30 	bl	80015bc <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fc2c 	bl	80015bc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e15a      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 faa6 	bl	80022d0 <RCC_Delay>
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fc16 	bl	80015bc <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	e00f      	b.n	8001db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7ff fc12 	bl	80015bc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d908      	bls.n	8001db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e140      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	42420000 	.word	0x42420000
 8001db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b9e      	ldr	r3, [pc, #632]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e9      	bne.n	8001d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a6 	beq.w	8001f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b97      	ldr	r3, [pc, #604]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b94      	ldr	r3, [pc, #592]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a93      	ldr	r2, [pc, #588]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b91      	ldr	r3, [pc, #580]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b8e      	ldr	r3, [pc, #568]	; (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b8b      	ldr	r3, [pc, #556]	; (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a8a      	ldr	r2, [pc, #552]	; (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fbd3 	bl	80015bc <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff fbcf 	bl	80015bc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	; 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0fd      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b81      	ldr	r3, [pc, #516]	; (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x312>
 8001e40:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a7a      	ldr	r2, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x334>
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	e01c      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x356>
 8001e78:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a6c      	ldr	r2, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a69      	ldr	r2, [pc, #420]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a66      	ldr	r2, [pc, #408]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a63      	ldr	r2, [pc, #396]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fb83 	bl	80015bc <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fb7f 	bl	80015bc <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0ab      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCC_OscConfig+0x37e>
 8001edc:	e014      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb6d 	bl	80015bc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff fb69 	bl	80015bc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e095      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b48      	ldr	r3, [pc, #288]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a47      	ldr	r2, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8081 	beq.w	8002026 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d061      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d146      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <HAL_RCC_OscConfig+0x4fc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fb3d 	bl	80015bc <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fb39 	bl	80015bc <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e067      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b35      	ldr	r3, [pc, #212]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d108      	bne.n	8001f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	492d      	ldr	r1, [pc, #180]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a19      	ldr	r1, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	430b      	orrs	r3, r1
 8001f92:	4927      	ldr	r1, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x4fc>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fb0d 	bl	80015bc <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fb09 	bl	80015bc <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e037      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x46a>
 8001fc4:	e02f      	b.n	8002026 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_RCC_OscConfig+0x4fc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff faf6 	bl	80015bc <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff faf2 	bl	80015bc <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e020      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x498>
 8001ff2:	e018      	b.n	8002026 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e013      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	429a      	cmp	r2, r3
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
 8002038:	42420060 	.word	0x42420060

0800203c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0d0      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0207 	bic.w	r2, r3, #7
 8002066:	4965      	ldr	r1, [pc, #404]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b8      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	494d      	ldr	r1, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d040      	beq.n	800215c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d115      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e073      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06b      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4936      	ldr	r1, [pc, #216]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212c:	f7ff fa46 	bl	80015bc <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7ff fa42 	bl	80015bc <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e053      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d210      	bcs.n	800218c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4922      	ldr	r1, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e032      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	490e      	ldr	r1, [pc, #56]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ca:	f000 f821 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	490a      	ldr	r1, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	5ccb      	ldrb	r3, [r1, r3]
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1cc>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1d0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f9a4 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40022000 	.word	0x40022000
 8002200:	40021000 	.word	0x40021000
 8002204:	08003318 	.word	0x08003318
 8002208:	20000008 	.word	0x20000008
 800220c:	20000014 	.word	0x20000014

08002210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b490      	push	{r4, r7}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002218:	1d3c      	adds	r4, r7, #4
 800221a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002220:	f240 2301 	movw	r3, #513	; 0x201
 8002224:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d002      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x40>
 800224a:	2b08      	cmp	r3, #8
 800224c:	d003      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x46>
 800224e:	e02d      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	623b      	str	r3, [r7, #32]
      break;
 8002254:	e02d      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	0c9b      	lsrs	r3, r3, #18
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002262:	4413      	add	r3, r2
 8002264:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002268:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	0c5b      	lsrs	r3, r3, #17
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002282:	4413      	add	r3, r2
 8002284:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002288:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228e:	fb02 f203 	mul.w	r2, r2, r3
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e004      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	623b      	str	r3, [r7, #32]
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ae:	623b      	str	r3, [r7, #32]
      break;
 80022b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b2:	6a3b      	ldr	r3, [r7, #32]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc90      	pop	{r4, r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	08003308 	.word	0x08003308
 80022c4:	40021000 	.word	0x40021000
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	003d0900 	.word	0x003d0900

080022d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <RCC_Delay+0x34>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <RCC_Delay+0x38>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0a5b      	lsrs	r3, r3, #9
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022ec:	bf00      	nop
  }
  while (Delay --);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	60fa      	str	r2, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f9      	bne.n	80022ec <RCC_Delay+0x1c>
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000008 	.word	0x20000008
 8002308:	10624dd3 	.word	0x10624dd3

0800230c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e076      	b.n	800240c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800232e:	d009      	beq.n	8002344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
 8002336:	e005      	b.n	8002344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fd ffe2 	bl	8000328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	0c1a      	lsrs	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f002 0204 	and.w	r2, r2, #4
 80023ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_SPI_Transmit+0x22>
 8002432:	2302      	movs	r3, #2
 8002434:	e126      	b.n	8002684 <HAL_SPI_Transmit+0x270>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243e:	f7ff f8bd 	bl	80015bc <HAL_GetTick>
 8002442:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d002      	beq.n	800245a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002458:	e10b      	b.n	8002672 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_SPI_Transmit+0x52>
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800246a:	e102      	b.n	8002672 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2203      	movs	r2, #3
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b2:	d10f      	bne.n	80024d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d007      	beq.n	80024f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024fa:	d14b      	bne.n	8002594 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_SPI_Transmit+0xf6>
 8002504:	8afb      	ldrh	r3, [r7, #22]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d13e      	bne.n	8002588 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	1c9a      	adds	r2, r3, #2
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800252e:	e02b      	b.n	8002588 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d112      	bne.n	8002564 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	1c9a      	adds	r2, r3, #2
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	86da      	strh	r2, [r3, #54]	; 0x36
 8002562:	e011      	b.n	8002588 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002564:	f7ff f82a 	bl	80015bc <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d803      	bhi.n	800257c <HAL_SPI_Transmit+0x168>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d102      	bne.n	8002582 <HAL_SPI_Transmit+0x16e>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d102      	bne.n	8002588 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002586:	e074      	b.n	8002672 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ce      	bne.n	8002530 <HAL_SPI_Transmit+0x11c>
 8002592:	e04c      	b.n	800262e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Transmit+0x18e>
 800259c:	8afb      	ldrh	r3, [r7, #22]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d140      	bne.n	8002624 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025c8:	e02c      	b.n	8002624 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d113      	bne.n	8002600 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80025fe:	e011      	b.n	8002624 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002600:	f7fe ffdc 	bl	80015bc <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d803      	bhi.n	8002618 <HAL_SPI_Transmit+0x204>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002616:	d102      	bne.n	800261e <HAL_SPI_Transmit+0x20a>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002622:	e026      	b.n	8002672 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1cd      	bne.n	80025ca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fa54 	bl	8002ae0 <SPI_EndRxTxTransaction>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2220      	movs	r2, #32
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e000      	b.n	8002672 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002670:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002682:	7ffb      	ldrb	r3, [r7, #31]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800269a:	2301      	movs	r3, #1
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x26>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e18a      	b.n	80029c8 <HAL_SPI_TransmitReceive+0x33c>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ba:	f7fe ff7f 	bl	80015bc <HAL_GetTick>
 80026be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d00f      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x70>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026e2:	d107      	bne.n	80026f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d103      	bne.n	80026f4 <HAL_SPI_TransmitReceive+0x68>
 80026ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d003      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026fa:	e15b      	b.n	80029b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_SPI_TransmitReceive+0x82>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_SPI_TransmitReceive+0x82>
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002714:	e14e      	b.n	80029b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b04      	cmp	r3, #4
 8002720:	d003      	beq.n	800272a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2205      	movs	r2, #5
 8002726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	d007      	beq.n	800277e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002786:	d178      	bne.n	800287a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_SPI_TransmitReceive+0x10a>
 8002790:	8b7b      	ldrh	r3, [r7, #26]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d166      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	881a      	ldrh	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	1c9a      	adds	r2, r3, #2
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ba:	e053      	b.n	8002864 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d11b      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x176>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d016      	beq.n	8002802 <HAL_SPI_TransmitReceive+0x176>
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d113      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	1c9a      	adds	r2, r3, #2
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d119      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x1b8>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d014      	beq.n	8002844 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	b292      	uxth	r2, r2
 8002826:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	1c9a      	adds	r2, r3, #2
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002840:	2301      	movs	r3, #1
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002844:	f7fe feba 	bl	80015bc <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002850:	429a      	cmp	r2, r3
 8002852:	d807      	bhi.n	8002864 <HAL_SPI_TransmitReceive+0x1d8>
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d003      	beq.n	8002864 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002862:	e0a7      	b.n	80029b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1a6      	bne.n	80027bc <HAL_SPI_TransmitReceive+0x130>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1a1      	bne.n	80027bc <HAL_SPI_TransmitReceive+0x130>
 8002878:	e07c      	b.n	8002974 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_SPI_TransmitReceive+0x1fc>
 8002882:	8b7b      	ldrh	r3, [r7, #26]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d16b      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	330c      	adds	r3, #12
 8002892:	7812      	ldrb	r2, [r2, #0]
 8002894:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ae:	e057      	b.n	8002960 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d11c      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x26c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x26c>
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d114      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d119      	bne.n	800293a <HAL_SPI_TransmitReceive+0x2ae>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d014      	beq.n	800293a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002936:	2301      	movs	r3, #1
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800293a:	f7fe fe3f 	bl	80015bc <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002946:	429a      	cmp	r2, r3
 8002948:	d803      	bhi.n	8002952 <HAL_SPI_TransmitReceive+0x2c6>
 800294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d102      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x2cc>
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800295e:	e029      	b.n	80029b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1a2      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x224>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d19d      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f8b1 	bl	8002ae0 <SPI_EndRxTxTransaction>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002990:	e010      	b.n	80029b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10b      	bne.n	80029b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	e000      	b.n	80029b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3730      	adds	r7, #48	; 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029e0:	f7fe fdec 	bl	80015bc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029f0:	f7fe fde4 	bl	80015bc <HAL_GetTick>
 80029f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	015b      	lsls	r3, r3, #5
 80029fc:	0d1b      	lsrs	r3, r3, #20
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a06:	e054      	b.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d050      	beq.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a10:	f7fe fdd4 	bl	80015bc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d902      	bls.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d13d      	bne.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3e:	d111      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a48:	d004      	beq.n	8002a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d107      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6c:	d10f      	bne.n	8002a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e017      	b.n	8002ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d19b      	bne.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000008 	.word	0x20000008

08002ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff ff6a 	bl	80029d0 <SPI_WaitFlagStateUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e000      	b.n	8002b14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e041      	b.n	8002bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fd fc3a 	bl	80003bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 fa1e 	bl	8002f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d122      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d11b      	bne.n	8002c16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f06f 0202 	mvn.w	r2, #2
 8002be6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f9b1 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002c02:	e005      	b.n	8002c10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f9a4 	bl	8002f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9b3 	bl	8002f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d122      	bne.n	8002c6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d11b      	bne.n	8002c6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0204 	mvn.w	r2, #4
 8002c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f987 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002c56:	e005      	b.n	8002c64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f97a 	bl	8002f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f989 	bl	8002f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d122      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d11b      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f06f 0208 	mvn.w	r2, #8
 8002c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2204      	movs	r2, #4
 8002c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f95d 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002caa:	e005      	b.n	8002cb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f950 	bl	8002f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f95f 	bl	8002f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d122      	bne.n	8002d12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d11b      	bne.n	8002d12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0210 	mvn.w	r2, #16
 8002ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f933 	bl	8002f64 <HAL_TIM_IC_CaptureCallback>
 8002cfe:	e005      	b.n	8002d0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f926 	bl	8002f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f935 	bl	8002f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10e      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d107      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f06f 0201 	mvn.w	r2, #1
 8002d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fd fef3 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d10e      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d107      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa78 	bl	800325a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d10e      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f8f9 	bl	8002f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d10e      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0220 	mvn.w	r2, #32
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fa43 	bl	8003248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_ConfigClockSource+0x18>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0b3      	b.n	8002f4a <HAL_TIM_ConfigClockSource+0x180>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e00:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e08:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1a:	d03e      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0xd0>
 8002e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e20:	f200 8087 	bhi.w	8002f32 <HAL_TIM_ConfigClockSource+0x168>
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	f000 8085 	beq.w	8002f36 <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e30:	d87f      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x168>
 8002e32:	2b70      	cmp	r3, #112	; 0x70
 8002e34:	d01a      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0xa2>
 8002e36:	2b70      	cmp	r3, #112	; 0x70
 8002e38:	d87b      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x168>
 8002e3a:	2b60      	cmp	r3, #96	; 0x60
 8002e3c:	d050      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0x116>
 8002e3e:	2b60      	cmp	r3, #96	; 0x60
 8002e40:	d877      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x168>
 8002e42:	2b50      	cmp	r3, #80	; 0x50
 8002e44:	d03c      	beq.n	8002ec0 <HAL_TIM_ConfigClockSource+0xf6>
 8002e46:	2b50      	cmp	r3, #80	; 0x50
 8002e48:	d873      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x168>
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d058      	beq.n	8002f00 <HAL_TIM_ConfigClockSource+0x136>
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d86f      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x168>
 8002e52:	2b30      	cmp	r3, #48	; 0x30
 8002e54:	d064      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0x156>
 8002e56:	2b30      	cmp	r3, #48	; 0x30
 8002e58:	d86b      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x168>
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d060      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0x156>
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d867      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x168>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d05c      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0x156>
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d05a      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e6a:	e062      	b.n	8002f32 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f000 f967 	bl	800314e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	609a      	str	r2, [r3, #8]
      break;
 8002e98:	e04e      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f000 f950 	bl	800314e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ebc:	609a      	str	r2, [r3, #8]
      break;
 8002ebe:	e03b      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f000 f8c7 	bl	8003060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2150      	movs	r1, #80	; 0x50
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f91e 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002ede:	e02b      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f000 f8e5 	bl	80030bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2160      	movs	r1, #96	; 0x60
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f90e 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002efe:	e01b      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f000 f8a7 	bl	8003060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2140      	movs	r1, #64	; 0x40
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f8fe 	bl	800311a <TIM_ITRx_SetConfig>
      break;
 8002f1e:	e00b      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f000 f8f5 	bl	800311a <TIM_ITRx_SetConfig>
        break;
 8002f30:	e002      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
	...

08002f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a29      	ldr	r2, [pc, #164]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a26      	ldr	r2, [pc, #152]	; (8003058 <TIM_Base_SetConfig+0xbc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0x30>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a25      	ldr	r2, [pc, #148]	; (800305c <TIM_Base_SetConfig+0xc0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00b      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d007      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <TIM_Base_SetConfig+0xbc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d003      	beq.n	8002ffe <TIM_Base_SetConfig+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a18      	ldr	r2, [pc, #96]	; (800305c <TIM_Base_SetConfig+0xc0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d108      	bne.n	8003010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <TIM_Base_SetConfig+0xb8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d103      	bne.n	8003044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	615a      	str	r2, [r3, #20]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800

08003060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f023 030a 	bic.w	r3, r3, #10
 800309c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 0210 	bic.w	r2, r3, #16
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	031b      	lsls	r3, r3, #12
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	621a      	str	r2, [r3, #32]
}
 8003110:	bf00      	nop
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	f043 0307 	orr.w	r3, r3, #7
 800313c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003168:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	021a      	lsls	r2, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	431a      	orrs	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4313      	orrs	r3, r2
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	609a      	str	r2, [r3, #8]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e046      	b.n	8003232 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a16      	ldr	r2, [pc, #88]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00e      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f0:	d009      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a10      	ldr	r2, [pc, #64]	; (8003244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10c      	bne.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800320c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800

08003248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <__libc_init_array>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	2600      	movs	r6, #0
 8003270:	4d0c      	ldr	r5, [pc, #48]	; (80032a4 <__libc_init_array+0x38>)
 8003272:	4c0d      	ldr	r4, [pc, #52]	; (80032a8 <__libc_init_array+0x3c>)
 8003274:	1b64      	subs	r4, r4, r5
 8003276:	10a4      	asrs	r4, r4, #2
 8003278:	42a6      	cmp	r6, r4
 800327a:	d109      	bne.n	8003290 <__libc_init_array+0x24>
 800327c:	f000 f830 	bl	80032e0 <_init>
 8003280:	2600      	movs	r6, #0
 8003282:	4d0a      	ldr	r5, [pc, #40]	; (80032ac <__libc_init_array+0x40>)
 8003284:	4c0a      	ldr	r4, [pc, #40]	; (80032b0 <__libc_init_array+0x44>)
 8003286:	1b64      	subs	r4, r4, r5
 8003288:	10a4      	asrs	r4, r4, #2
 800328a:	42a6      	cmp	r6, r4
 800328c:	d105      	bne.n	800329a <__libc_init_array+0x2e>
 800328e:	bd70      	pop	{r4, r5, r6, pc}
 8003290:	f855 3b04 	ldr.w	r3, [r5], #4
 8003294:	4798      	blx	r3
 8003296:	3601      	adds	r6, #1
 8003298:	e7ee      	b.n	8003278 <__libc_init_array+0xc>
 800329a:	f855 3b04 	ldr.w	r3, [r5], #4
 800329e:	4798      	blx	r3
 80032a0:	3601      	adds	r6, #1
 80032a2:	e7f2      	b.n	800328a <__libc_init_array+0x1e>
 80032a4:	08003328 	.word	0x08003328
 80032a8:	08003328 	.word	0x08003328
 80032ac:	08003328 	.word	0x08003328
 80032b0:	0800332c 	.word	0x0800332c

080032b4 <memcpy>:
 80032b4:	440a      	add	r2, r1
 80032b6:	4291      	cmp	r1, r2
 80032b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032bc:	d100      	bne.n	80032c0 <memcpy+0xc>
 80032be:	4770      	bx	lr
 80032c0:	b510      	push	{r4, lr}
 80032c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032c6:	4291      	cmp	r1, r2
 80032c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032cc:	d1f9      	bne.n	80032c2 <memcpy+0xe>
 80032ce:	bd10      	pop	{r4, pc}

080032d0 <memset>:
 80032d0:	4603      	mov	r3, r0
 80032d2:	4402      	add	r2, r0
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d100      	bne.n	80032da <memset+0xa>
 80032d8:	4770      	bx	lr
 80032da:	f803 1b01 	strb.w	r1, [r3], #1
 80032de:	e7f9      	b.n	80032d4 <memset+0x4>

080032e0 <_init>:
 80032e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e2:	bf00      	nop
 80032e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e6:	bc08      	pop	{r3}
 80032e8:	469e      	mov	lr, r3
 80032ea:	4770      	bx	lr

080032ec <_fini>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr
